{
    "snippets": [
        {
            "title": "Stage event",
            "description": "Subscribe/unsubscribe to stage events",
            "snippet": "import carb.events\nimport omni.usd\n\n# callback\ndef on_stage_event(event):\n    print(f\"Stage event: {event.type} {event.sender} {event.payload}\")\n    if event.type == int(omni.usd.StageEventType.SAVED):\n        pass\n    elif event.type == int(omni.usd.StageEventType.SAVE_FAILED):\n        pass\n    elif event.type == int(omni.usd.StageEventType.OPENING):\n        pass\n    elif event.type == int(omni.usd.StageEventType.OPENED):\n        pass\n    elif event.type == int(omni.usd.StageEventType.OPEN_FAILED):\n        pass\n    elif event.type == int(omni.usd.StageEventType.CLOSING):\n        pass\n    elif event.type == int(omni.usd.StageEventType.CLOSED):\n        pass\n    elif event.type == int(omni.usd.StageEventType.SELECTION_CHANGED):\n        pass\n    elif event.type == int(omni.usd.StageEventType.ASSETS_LOADED):\n        pass\n    elif event.type == int(omni.usd.StageEventType.ASSETS_LOAD_ABORTED):\n        pass\n    elif event.type == int(omni.usd.StageEventType.GIZMO_TRACKING_CHANGED):\n        pass\n    elif event.type == int(omni.usd.StageEventType.MDL_PARAM_LOADED):\n        pass\n    elif event.type == int(omni.usd.StageEventType.SETTINGS_LOADED):\n        pass\n    elif event.type == int(omni.usd.StageEventType.SETTINGS_SAVING):\n        pass\n    elif event.type == int(omni.usd.StageEventType.OMNIGRAPH_START_PLAY):\n        pass\n    elif event.type == int(omni.usd.StageEventType.OMNIGRAPH_STOP_PLAY):\n        pass\n    elif event.type == int(omni.usd.StageEventType.SIMULATION_START_PLAY):\n        pass\n    elif event.type == int(omni.usd.StageEventType.SIMULATION_STOP_PLAY):\n        pass\n    elif event.type == int(omni.usd.StageEventType.ANIMATION_START_PLAY):\n        pass\n    elif event.type == int(omni.usd.StageEventType.ANIMATION_STOP_PLAY):\n        pass\n    elif event.type == int(omni.usd.StageEventType.DIRTY_STATE_CHANGED):\n        pass\n\n# subscription \nstage_event_sub = (omni.usd.get_context()\n                   .get_stage_event_stream()\n                   .create_subscription_to_pop(on_stage_event, name=\"subscription name\"))\n\n# unsubscription\nstage_event_sub = None\n"
        },
        {
            "title": "Physics event",
            "description": "Subscribe/unsubscribe to physics events",
            "snippet": "import carb.events\nimport omni.physx\n\n# callback\ndef on_physics_event(dt):\n    print(f\"Physics event: {dt}\")\n\n# subscription\nphysics_event_sub = (omni.physx.acquire_physx_interface()\n                     .subscribe_physics_step_events(on_physics_event))\n\n# unsubscription\nphysics_event_sub = None\n"
        },
        {
            "title": "Timeline event",
            "description": "Subscribe/unsubscribe to timeline events",
            "snippet": "import carb.events\nimport omni.timeline\n\n# callback\ndef on_timeline_event(event):\n    print(f\"Timeline event: {event.type} {event.sender} {event.payload}\")\n    if event.type == int(omni.timeline.TimelineEventType.PLAY):\n        pass\n    elif event.type == int(omni.timeline.TimelineEventType.PAUSE):\n        pass\n    elif event.type == int(omni.timeline.TimelineEventType.STOP):\n        pass\n    elif event.type == int(omni.timeline.TimelineEventType.CURRENT_TIME_CHANGED):\n        pass\n    elif event.type == int(omni.timeline.TimelineEventType.CURRENT_TIME_TICKED):\n        pass\n    elif event.type == int(omni.timeline.TimelineEventType.LOOP_MODE_CHANGED):\n        pass\n    elif event.type == int(omni.timeline.TimelineEventType.START_TIME_CHANGED):\n        pass\n    elif event.type == int(omni.timeline.TimelineEventType.END_TIME_CHANGED):\n        pass\n    elif event.type == int(omni.timeline.TimelineEventType.TIME_CODE_PER_SECOND_CHANGED):\n        pass\n    elif event.type == int(omni.timeline.TimelineEventType.AUTO_UPDATE_CHANGED):\n        pass\n    elif event.type == int(omni.timeline.TimelineEventType.PREROLLING_CHANGED):\n        pass\n\n# subscription\ntimeline_event_sub = (omni.timeline.get_timeline_interface()\n                      .get_timeline_event_stream()\n                      .create_subscription_to_pop(on_timeline_event, name=\"subscription Name\"))\n\n# unsubscription\ntimeline_event_sub = None\n"
        },
        {
            "title": "Update event",
            "description": "Subscribe/unsubscribe to update events",
            "snippet": "import carb.events\nimport omni.kit.app\n\n# callback\ndef on_update_event(event):\n    print(f\"Update event: {event.type} {event.sender} {event.payload}\")\n\n# subscription\nupdate_event_sub = (omni.kit.app.get_app()\n                    .get_update_event_stream()\n                    .create_subscription_to_pop(on_update_event, name=\"subscription Name\"))\n\n# unsubscription\nupdate_event_sub = None\n"
        },
        {
            "title": "Keyboard input event",
            "description": "Subscribe/unsubscribe to keyboard input events",
            "snippet": "import carb.input\nimport omni.appwindow\n\n# callback\ndef on_keyboard_event(event):\n    print(f\"Input event: {event.device} {event.input} {event.keyboard} {event.modifiers} {event.type}\")\n    # e.g. key A pressed/released\n    if event.input == carb.input.KeyboardInput.A:\n        if event.type == carb.input.KeyboardEventType.KEY_PRESS:\n            print(\"Key A pressed\")\n        elif event.type == carb.input.KeyboardEventType.KEY_RELEASE:\n            print(\"Key A released\")\n\n# get keyboard\nkeyboard = omni.appwindow.get_default_app_window().get_keyboard()\n\n# subscription\nkeyboard_event_sub = (carb.input.acquire_input_interface()\n                      .subscribe_to_keyboard_events(keyboard, on_keyboard_event))\n\n# unsubscription\ncarb.input.acquire_input_interface().unsubscribe_to_keyboard_events(keyboard, keyboard_event_sub)\n"
        }
    ]
}