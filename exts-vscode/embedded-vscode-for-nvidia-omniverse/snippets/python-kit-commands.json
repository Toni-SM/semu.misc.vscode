{
"snippets": [
{
"title": "omni.anim",
"snippets": [
{
"title": "AddAnimCurves",
"description": "[omni.anim.curve.scripts.commands]\n\nAdd an empty curve for the given attribute path(s). Non-exist attribute paths will be skipped\n@param\n paths: is a list of string-typed attribute paths. Each path can be one of three types\n 1. prim path: Add curves for all of its available attributes. e.g. \"/World/Cube\"\n 2. attribute path: Add curves for that specific attribute. Multiple curves will be added for vector-typed attribute e.g. \"/World/Cube.size\", \"/World/Cube.xformOp:translate\": 3. None: Add curves for all currently selected prims\n paths default value is None\n\n@return\n Return True if we successfully add curves for all the paths\n Return False if any curve's addition is skipped due to some error\n@example\n AddAnimCurves(paths=[\"/World/Cube.xformOp:translate|x\", \"/World/Sphere.radius\"])\n AddAnimCurves(paths=[\"/World/Cube.size|x\"]) same as AddAnimCurves(paths=[\"/World/Cube.size\"])\n AddAnimCurves(paths=[\"/World/Cube.xformOp:translate\"])\n AddAnimCurves(paths=[\"/World/Cube\"])\n AddAnimCurves()",
"snippet": "omni.kit.commands.execute(\"AddAnimCurves\",\n                          paths=None)  # list\n"
},
{
"title": "AnimCurveKeyCopy",
"description": "[omni.anim.curve.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"AnimCurveKeyCopy\",\n                          schemaKeys=schemaKeys,  # list\n                          timeOffset=0,  # float\n                          dstCurvePaths=None)  # list\n"
},
{
"title": "AnimDataCopy",
"description": "[omni.anim.curve.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"AnimDataCopy\",\n                          listSchemaKeys=listSchemaKeys,  # list\n                          dstCurvePath=dstCurvePath)\n"
},
{
"title": "ApplyAnimationGraphAPICommand",
"description": "[omni.anim.graph.core.scripts.command]",
"snippet": "omni.kit.commands.execute(\"ApplyAnimationGraphAPICommand\",\n                          layer=None,  # pxr.Sdf.Layer\n                          paths=[],  # typing.List[pxr.Sdf.Path]\n                          animation_graph_path=Sdf.Path.emptyPath)  # pxr.Sdf.Path\n"
},
{
"title": "ApplyAnimationSkelBindingAPICommand",
"description": "[omni.anim.retarget.ui.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"ApplyAnimationSkelBindingAPICommand\",\n                          layer=None,  # pxr.Sdf.Layer\n                          paths=[])  # typing.List[pxr.Sdf.Path]\n"
},
{
"title": "ApplyControlRigAPICommand",
"description": "[omni.anim.retarget.ui.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"ApplyControlRigAPICommand\",\n                          layer=None,  # pxr.Sdf.Layer\n                          paths=[])  # typing.List[pxr.Sdf.Path]\n"
},
{
"title": "AssignAnimation",
"description": "[omni.anim.shared.scripts.assignAnim]",
"snippet": "omni.kit.commands.execute(\"AssignAnimation\",\n                          skeleton_path=skeleton_path,\n                          animprim_path=animprim_path)\n"
},
{
"title": "ChangeSelectionCurveCommand",
"description": "[omni.anim.curve_editor.commands]",
"snippet": "omni.kit.commands.execute(\"ChangeSelectionCurveCommand\",\n                          new_times=new_times,\n                          new_track_names=new_track_names,\n                          new_track_users=new_track_users,\n                          delete_times=delete_times,\n                          delete_track_names=delete_track_names,\n                          delete_track_users=delete_track_users,\n                          singleton_curve_editor_wp=singleton_curve_editor_wp,\n                          edit_scope=None)\n"
},
{
"title": "ClearRetargetTagsCommand",
"description": "[omni.anim.retarget.core.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"ClearRetargetTagsCommand\",\n                          skel_paths=skel_paths)  # list\n"
},
{
"title": "CreateAnimationGraphCommand",
"description": "[omni.anim.graph.core.scripts.command]",
"snippet": "omni.kit.commands.execute(\"CreateAnimationGraphCommand\",\n                          layer=None,  # pxr.Sdf.Layer\n                          path=Sdf.Path.emptyPath,  # pxr.Sdf.Path\n                          skeleton_path=Sdf.Path.emptyPath)  # pxr.Sdf.Path\n"
},
{
"title": "CreateBehaviorScriptCommand",
"description": "[omni.anim.graph.core.scripts.command]",
"snippet": "omni.kit.commands.execute(\"CreateBehaviorScriptCommand\",\n                          layer=None,  # pxr.Sdf.Layer\n                          path=Sdf.Path.emptyPath,  # pxr.Sdf.Path\n                          script_path=@@,  # pxr.Sdf.AssetPath\n                          character_path=Sdf.Path.emptyPath)  # pxr.Sdf.Path\n"
},
{
"title": "CreateRetargetAnimationsCommand",
"description": "[omni.anim.retarget.core.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"CreateRetargetAnimationsCommand\",\n                          source_skeleton_path=source_skeleton_path,  # str\n                          target_skeleton_path=target_skeleton_path,  # str\n                          source_animation_paths=source_animation_paths,  # typing.List[str]\n                          target_animation_parent_path=target_animation_parent_path,  # str\n                          set_root_identity=set_root_identity)  # bool\n"
},
{
"title": "DeleteTimeCurveCommand",
"description": "[omni.anim.curve_editor.commands]",
"snippet": "omni.kit.commands.execute(\"DeleteTimeCurveCommand\",\n                          prim_path=prim_path,  # str\n                          attr_name=attr_name,  # str\n                          tIn=tIn,  # float\n                          vIn=vIn,  # float\n                          tOut=tOut,  # float\n                          vOut=vOut,  # float\n                          value=value,  # float\n                          broken=broken,  # bool\n                          weighted=weighted,  # bool\n                          type=type,  # bool\n                          time=time,  # float\n                          edit_scope=None)\n"
},
{
"title": "LoadRetargetPoseCommand",
"description": "[omni.anim.retarget.core.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"LoadRetargetPoseCommand\",\n                          skel_paths=skel_paths)  # list\n"
},
{
"title": "MoveAnimCurveKey",
"description": "[omni.anim.curve.scripts.commands]\n\n Moves a list of keys from the source time to the destination time\n @param\n paths: curves' path, only move keys in these curves e.g. /World/Cube.xformOp:translate|x\n or prims' path, move keys in all curves of this prim e.g. /World/Cube\n or None, move keys in all curves of all the SELECTED prims\n The default value is None\n src_time: time in timeCode(frame) to get the keys\n dst_time: time in timeCode(frame) that the keys are moved to\n @return\n Return True if we successfully moved any keys and there is no errors\n Return False if no keys is moved or there are errors generated\n @example\n MoveAnimCurveKey(paths=[\"/World/Cube.xformOp:translate|x\", \"/World/Sphere.radius\"], src_time=20, dst_time=40)\n MoveAnimCurveKey(paths=[\"/World/Cube.size|x\"], src_time=20, dst_time=40)\n MoveAnimCurveKey(paths=[\"/World/Cube.xformOp:translate\"], src_time=20, dst_time=40)\n MoveAnimCurveKey(paths=[\"/World/Cube\"], src_time=20, dst_time=40)\n MoveAnimCurveKey(src_time=20, dst_time = 50)",
"snippet": "omni.kit.commands.execute(\"MoveAnimCurveKey\",\n                          paths=None,  # list\n                          src_time=None,  # pxr.Usd.TimeCode\n                          dst_time=None)  # pxr.Usd.TimeCode\n"
},
{
"title": "MoveControlCurveCommand",
"description": "[omni.anim.curve_editor.commands]",
"snippet": "omni.kit.commands.execute(\"MoveControlCurveCommand\",\n                          prim_path=prim_path,  # str\n                          attr_name=attr_name,  # str\n                          new_tIn=new_tIn,  # float\n                          new_vIn=new_vIn,  # float\n                          new_tOut=new_tOut,  # float\n                          new_vOut=new_vOut,  # float\n                          time=time,  # float\n                          edit_scope=None,\n                          old_tIn=0.0,\n                          old_vIn=0.0,\n                          old_tOut=0.0,\n                          old_vOut=0.0)\n"
},
{
"title": "MoveTimeCurveCommand",
"description": "[omni.anim.curve_editor.commands]",
"snippet": "omni.kit.commands.execute(\"MoveTimeCurveCommand\",\n                          prim_path=prim_path,  # str\n                          attr_name=attr_name,  # str\n                          new_tIn=new_tIn,  # float\n                          new_vIn=new_vIn,  # float\n                          new_tOut=new_tOut,  # float\n                          new_vOut=new_vOut,  # float\n                          new_value=new_value,  # float\n                          new_time=new_time,  # float\n                          old_time=old_time,  # float\n                          unchanged_broken=unchanged_broken,  # bool\n                          unchanged_weighted=unchanged_weighted,  # bool\n                          unchanged_type=unchanged_type,  # bool\n                          edit_scope=None,\n                          old_tIn=0.0,\n                          old_vIn=0.0,\n                          old_tOut=0.0,\n                          old_vOut=0.0,\n                          old_value=0.0)\n"
},
{
"title": "NewAttributeCurveCommand",
"description": "[omni.anim.curve_editor.commands]",
"snippet": "omni.kit.commands.execute(\"NewAttributeCurveCommand\",\n                          prim_path=prim_path,  # str\n                          attr_name=attr_name,  # str\n                          components_quantity=components_quantity)  # int\n"
},
{
"title": "NewTimelineNodeAttributeCurveCommand",
"description": "[omni.anim.curve_editor.commands]",
"snippet": "omni.kit.commands.execute(\"NewTimelineNodeAttributeCurveCommand\",\n                          prim_path=prim_path,  # str\n                          attr_name=attr_name,  # str\n                          components_quantity=components_quantity)  # int\n"
},
{
"title": "RefreshPropertyWindowCommand",
"description": "[omni.anim.graph.ui.scripts.command]",
"snippet": "omni.kit.commands.execute(\"RefreshPropertyWindowCommand\")\n"
},
{
"title": "RemoveAnimCurve",
"description": "[omni.anim.curve.scripts.commands]\n\n Remove a list of curves specified by the paths\n @param\n paths: 1. curves' path, only move keys in these curves e.g. /World/Cube.xformOp:translate|x\n 2. prims' path, move keys in all curves of this prim e.g. /World/Cube\n 3. None, move keys in all curves of all the SELECTED prims\n The default value is None\n @return\n Return True if we successfully remove the curve without any errors\n Return False if no curve is removed or there are errors generated\n @example\n RemoveAnimCurve(paths=[\"/World/Cube.xformOp:translate|x\", \"/World/Sphere.radius\"]) #Remove two curves\n RemoveAnimCurve(paths=[\"/World/Cube.size|x\"]) #Remove the specified curve\n RemoveAnimCurve(paths=[\"/World/Cube.xformOp:translate\"]) #Remove three curves\n RemoveAnimCurve(paths=[\"/World/Cube\"]) #Remove all of its curves in this prim\n RemoveAnimCurve() #Remove all curves of the selected prim",
"snippet": "omni.kit.commands.execute(\"RemoveAnimCurve\",\n                          paths=None)  # list\n"
},
{
"title": "RemoveAnimCurveKey",
"description": "[omni.anim.curve.scripts.commands]\n\n Remove a list of keys from specificed curves(names)\n @param\n paths: is a list of string-typed USD paths. Each path can be one of three types\n 1) curves names path, only remove keys in these curves e.g. /World/Cube.xformOp:translate|x\n 2) prims' path, remove keys from all animation curves of this prim e.g. /World/Cube\n 3) None, remove keys from all curves of all the SELECTED prims\n The default value is None\n stage: the USD stage of those USD paths resides in\n time: UsdTimeCode, usually equal to the frame number as the index of the key. None to use the current time\n @return\n Return True if we successfully remove any keys and there is no errors\n Return False if no keys is removed or there are errors generated\n @example\n RemoveAnimCurveKey(stage=stage, paths=[\"/World/Cube.xformOp:translate|x\", \"/World/Sphere.radius\"], time=Usd.TimeCode(20.0))\n RemoveAnimCurveKey(stage=stage, paths=[\"/World/Cube.size|x\"], time=Usd.TimeCode(20.0))\n RemoveAnimCurveKey(stage=stage, paths=[\"/World/Cube.xformOp:translate\"], time=Usd.TimeCode(20.0))\n RemoveAnimCurveKey(stage=stage, paths=[\"/World/Cube\"])\n RemoveAnimCurveKey(stage=stage, time=Usd.TimeCode(20.0))\n RemoveAnimCurveKey(stage=stage)",
"snippet": "omni.kit.commands.execute(\"RemoveAnimCurveKey\",\n                          stage=stage,  # pxr.Usd.Stage\n                          paths=None,  # list\n                          time=None)  # pxr.Usd.TimeCode\n"
},
{
"title": "RemoveAnimData",
"description": "[omni.anim.curve.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"RemoveAnimData\",\n                          stage=stage,  # pxr.Usd.Stage\n                          paths=None)  # list\n"
},
{
"title": "RemoveAnimationGraphAPICommand",
"description": "[omni.anim.graph.core.scripts.command]",
"snippet": "omni.kit.commands.execute(\"RemoveAnimationGraphAPICommand\",\n                          layer=None,  # pxr.Sdf.Layer\n                          paths=[])  # typing.List[pxr.Sdf.Path]\n"
},
{
"title": "RemoveRetargetPoseCommand",
"description": "[omni.anim.retarget.core.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"RemoveRetargetPoseCommand\",\n                          skel_paths=skel_paths)  # list\n"
},
{
"title": "RenameAnimationGraphVariableAttributeCommand",
"description": "[omni.anim.graph.core.scripts.command]",
"snippet": "omni.kit.commands.execute(\"RenameAnimationGraphVariableAttributeCommand\",\n                          prim=prim,  # pxr.Usd.Prim\n                          old_attr_name=old_attr_name,  # str\n                          new_attr_name=new_attr_name)  # str\n"
},
{
"title": "ReplaceRelationshipTargetCommand",
"description": "[omni.anim.graph.ui.scripts.command]",
"snippet": "omni.kit.commands.execute(\"ReplaceRelationshipTargetCommand\",\n                          relationship=relationship,  # pxr.Usd.Relationship\n                          old_target=old_target,  # pxr.Sdf.Path\n                          new_target=new_target)  # pxr.Sdf.Path\n"
},
{
"title": "RetargetOpenWindowCommand",
"description": "[omni.anim.retarget.ui.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"RetargetOpenWindowCommand\",\n                          skel_path=skel_path)  # str\n"
},
{
"title": "RetargetSelectSkeletonCommand",
"description": "[omni.anim.retarget.ui.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"RetargetSelectSkeletonCommand\",\n                          skel_path=skel_path)  # str\n"
},
{
"title": "SaveRetargetPoseCommand",
"description": "[omni.anim.retarget.core.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"SaveRetargetPoseCommand\",\n                          skel_paths=skel_paths)  # list\n"
},
{
"title": "SaveRetargetPoseTransformCommand",
"description": "[omni.anim.retarget.core.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"SaveRetargetPoseTransformCommand\",\n                          skel_paths=skel_paths,  # list\n                          transforms=transforms)  # list\n"
},
{
"title": "SaveSkelPoseCommand",
"description": "[omni.anim.skelJoint.savePose]",
"snippet": "omni.kit.commands.execute(\"SaveSkelPoseCommand\",\n                          save_target=save_target)\n"
},
{
"title": "SelectionMoveTimeCurveCommand",
"description": "[omni.anim.curve_editor.commands]",
"snippet": "omni.kit.commands.execute(\"SelectionMoveTimeCurveCommand\",\n                          track_name=track_name,  # str\n                          track_user=track_user,  # str\n                          new_time=new_time,  # float\n                          old_time=old_time,  # float\n                          singleton_curve_editor_wp=singleton_curve_editor_wp,\n                          edit_scope=None)\n"
},
{
"title": "SetAnimCurveKey",
"description": "[omni.anim.curve.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"SetAnimCurveKey\",\n                          paths=None,  # list\n                          time=None,  # pxr.Usd.TimeCode\n                          value=None,  # typing.Any\n                          preserveCurveShape=True,  # bool\n                          adjustExistingTangent=True,  # bool\n                          inTangentType=\"auto\",  # str\n                          outTangentType=\"auto\",  # str\n                          tangentBreakDown=False,  # bool\n                          convertTimeSamples=False)  # bool\n"
},
{
"title": "SetAnimationGraphNodePositionCommand",
"description": "[omni.anim.graph.ui.scripts.command]",
"snippet": "omni.kit.commands.execute(\"SetAnimationGraphNodePositionCommand\",\n                          prim=prim,  # pxr.Usd.Prim\n                          position_attribute_name=position_attribute_name,  # str\n                          value=value)  # typing.Union[typing.Tuple[float, float], NoneType]\n"
},
{
"title": "SetAnimationGraphVariableAttributeTypeCommand",
"description": "[omni.anim.graph.core.scripts.command]",
"snippet": "omni.kit.commands.execute(\"SetAnimationGraphVariableAttributeTypeCommand\",\n                          prim=prim,  # pxr.Usd.Prim\n                          attr_name=attr_name,  # str\n                          new_type=new_type,  # pxr.Sdf.ValueTypeName\n                          new_value=None)\n"
},
{
"title": "SetAnimationGraphVariableDescriptionCommand",
"description": "[omni.anim.graph.core.scripts.command]",
"snippet": "omni.kit.commands.execute(\"SetAnimationGraphVariableDescriptionCommand\",\n                          prim=prim,  # pxr.Usd.Prim\n                          attr_name=attr_name,  # str\n                          description=description)  # str\n"
},
{
"title": "SetKeyframeSliderCommand",
"description": "[omni.anim.window.timeline.scripts.keyframe_slider]",
"snippet": "omni.kit.commands.execute(\"SetKeyframeSliderCommand\",\n                          slider=slider,  # omni.anim.window.timeline.scripts.keyframe_slider.KeyframeSlider\n                          start=start,  # int\n                          end=end)  # int\n"
},
{
"title": "SetRelationshipTargetsCommand",
"description": "[omni.anim.graph.ui.scripts.command]",
"snippet": "omni.kit.commands.execute(\"SetRelationshipTargetsCommand\",\n                          relationship=relationship,  # pxr.Usd.Relationship\n                          targets=targets)  # typing.List[pxr.Sdf.Path]\n"
},
{
"title": "SetSkeletonJointTagPairCommand",
"description": "[omni.anim.retarget.core.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"SetSkeletonJointTagPairCommand\",\n                          skel_paths=skel_paths,  # list\n                          tag_joint_dict=tag_joint_dict)  # typing.Dict[str, str]\n"
},
{
"title": "SetSkeletonTagsCommand",
"description": "[omni.anim.retarget.core.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"SetSkeletonTagsCommand\",\n                          skel_paths=skel_paths,  # list\n                          tags=tags)  # pxr.Vt.TokenArray\n"
},
{
"title": "SetSkeletonUpForwardAxis",
"description": "[omni.anim.retarget.core.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"SetSkeletonUpForwardAxis\",\n                          skel_paths=skel_paths,  # list\n                          is_up_axis=is_up_axis,  # bool\n                          axis=axis)  # str\n"
},
{
"title": "ShowKeyframeSliderCommand",
"description": "[omni.anim.window.timeline.scripts.keyframe_slider]",
"snippet": "omni.kit.commands.execute(\"ShowKeyframeSliderCommand\",\n                          slider=slider,  # omni.anim.window.timeline.scripts.keyframe_slider.KeyframeSlider\n                          visible=visible)  # bool\n"
},
{
"title": "TangentBrokenChangeCurveCommand",
"description": "[omni.anim.curve_editor.commands]",
"snippet": "omni.kit.commands.execute(\"TangentBrokenChangeCurveCommand\",\n                          prim_path=prim_path,  # str\n                          attr_name=attr_name,  # str\n                          new_tangent_broken=new_tangent_broken,  # bool\n                          time=time,  # float\n                          edit_scope=None,\n                          old_tangent_broken=False)\n"
},
{
"title": "TangentTypeChangeCurveCommand",
"description": "[omni.anim.curve_editor.commands]",
"snippet": "omni.kit.commands.execute(\"TangentTypeChangeCurveCommand\",\n                          prim_path=prim_path,  # str\n                          attr_name=attr_name,  # str\n                          new_in_type=new_in_type,  # int\n                          new_out_type=new_out_type,  # int\n                          time=time,  # float\n                          edit_scope=None,\n                          old_in_type=0,\n                          old_out_type=0)\n"
},
{
"title": "TangentWeightedChangeCurveCommand",
"description": "[omni.anim.curve_editor.commands]",
"snippet": "omni.kit.commands.execute(\"TangentWeightedChangeCurveCommand\",\n                          prim_path=prim_path,  # str\n                          attr_name=attr_name,  # str\n                          new_tangent_weighted=new_tangent_weighted,  # bool\n                          time=time,  # float\n                          edit_scope=None,\n                          old_tangent_weighted=False)\n"
}
]
},
{
"title": "omni.command",
"snippets": [
{
"title": "ParentPrimsCommand",
"description": "[omni.command.usd.commands.parenting_commands]",
"snippet": "omni.kit.commands.execute(\"ParentPrimsCommand\",\n                          parent_path=parent_path,  # str\n                          child_paths=child_paths,  # typing.List[str]\n                          on_move_fn=None)  # callable\n"
},
{
"title": "SetPayLoadLoadSelectedPrimsCommand",
"description": "[omni.command.usd.commands.usd_commands]",
"snippet": "omni.kit.commands.execute(\"SetPayLoadLoadSelectedPrimsCommand\",\n                          selected_paths=selected_paths,  # typing.List[str]\n                          value=value)  # bool\n"
},
{
"title": "TogglePayLoadLoadSelectedPrimsCommand",
"description": "[omni.command.usd.commands.usd_commands]",
"snippet": "omni.kit.commands.execute(\"TogglePayLoadLoadSelectedPrimsCommand\",\n                          selected_paths=selected_paths)  # typing.List[str]\n"
},
{
"title": "UnparentPrimsCommand",
"description": "[omni.command.usd.commands.parenting_commands]",
"snippet": "omni.kit.commands.execute(\"UnparentPrimsCommand\",\n                          paths=paths,  # typing.List[str]\n                          on_move_fn=None)  # callable\n"
}
]
},
{
"title": "omni.curve",
"snippets": [
{
"title": "AddCvSelection",
"description": "[omni.curve.manipulator.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"AddCvSelection\",\n                          selection=selection,  # ProxyType[CvSelection]\n                          basis_curves=basis_curves,  # UsdGeom.BasisCurves\n                          id=id,  # int\n                          clear_previous=clear_previous)  # bool\n"
},
{
"title": "ClearCvSelection",
"description": "[omni.curve.manipulator.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"ClearCvSelection\",\n                          selection=selection,  # ProxyType[CvSelection]\n                          basis_curves=None)  # UsdGeom.BasisCurves\n"
},
{
"title": "CreateCurveNodesEntityCommand",
"description": "[omni.curve.nodes.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"CreateCurveNodesEntityCommand\",\n                          callback=callback)  # typing.Callable[[], typing.List[str]]\n"
},
{
"title": "CvSelectionBase",
"description": "[omni.curve.manipulator.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"CvSelectionBase\",\n                          selection=selection,  # ProxyType[CvSelection]\n                          basis_curves=basis_curves,  # UsdGeom.BasisCurves\n                          id=id)  # int\n"
},
{
"title": "DisableCurveEditing",
"description": "[omni.curve.manipulator.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"DisableCurveEditing\",\n                          curve_context=curve_context,  # CurveManipulatorContext\n                          usd_context_name=\"\")  # str\n"
},
{
"title": "EnableCurveEditing",
"description": "[omni.curve.manipulator.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"EnableCurveEditing\",\n                          paths=paths,  # List[str]\n                          mode=mode,  # CurveEditingModeType\n                          curve_context=curve_context,  # CurveManipulatorContext\n                          usd_context_name=\"\")  # str\n"
},
{
"title": "RemoveCvSelection",
"description": "[omni.curve.manipulator.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"RemoveCvSelection\",\n                          selection=selection,  # ProxyType[CvSelection]\n                          basis_curves=basis_curves,  # UsdGeom.BasisCurves\n                          id=id)  # int\n"
},
{
"title": "SetCvSelection",
"description": "[omni.curve.manipulator.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"SetCvSelection\",\n                          selection=selection,  # CvSelection\n                          selected_cvs=selected_cvs)  # Set[Tuple[UsdGeom.BasisCurves, int]]\n"
}
]
},
{
"title": "omni.example",
"snippets": [
{
"title": "SetDisplayColorCommand",
"description": "[omni.example.ui.scripts.colorwidget_doc]\n\nChange prim display color undoable. Unlike ChangePropertyCommand, it can undo property creation.\n\nArgs:\n gprim (Gprim): Prim to change display color on.\n value: Value to change to.\n value: Value to undo to.",
"snippet": "omni.kit.commands.execute(\"SetDisplayColorCommand\",\n                          gprim=gprim,  # pxr.UsdGeom.Gprim\n                          color=color,  # typing.Any\n                          prev=prev)  # typing.Any\n"
}
]
},
{
"title": "omni.flowusd",
"snippets": [
{
"title": "FlowCreateBasicEffectCommand",
"description": "[omni.flowusd.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"FlowCreateBasicEffectCommand\",\n                          path=path,  # str\n                          layer=layer)  # int\n"
},
{
"title": "FlowCreatePointCloudCommand",
"description": "[omni.flowusd.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"FlowCreatePointCloudCommand\",\n                          path=path,  # str\n                          layer=layer)  # int\n"
},
{
"title": "FlowCreatePresetCommand",
"description": "[omni.flowusd.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"FlowCreatePresetCommand\",\n                          path=path,  # str\n                          layer=layer,  # str\n                          menu_item=menu_item,  # str\n                          emitter_only=emitter_only)  # bool\n"
},
{
"title": "FlowCreatePresetMultipleCommand",
"description": "[omni.flowusd.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"FlowCreatePresetMultipleCommand\",\n                          paths=paths,  # str\n                          layer=layer,  # str\n                          menu_item=menu_item)  # str\n"
},
{
"title": "FlowCreatePrimCommand",
"description": "[omni.flowusd.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"FlowCreatePrimCommand\",\n                          prim_path=prim_path,  # str\n                          type_name=type_name)  # str\n"
},
{
"title": "SetFlowRampValuesCommand",
"description": "[omni.flowusd.scripts.ramp]",
"snippet": "omni.kit.commands.execute(\"SetFlowRampValuesCommand\",\n                          ramps=ramps)\n"
}
]
},
{
"title": "omni.graph",
"snippets": [
{
"title": "ApplyOmniGraphAPICommand",
"description": "[omni.graph.instancing.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"ApplyOmniGraphAPICommand\",\n                          layer=None,  # pxr.Sdf.Layer\n                          paths=[],  # typing.List[pxr.Sdf.Path]\n                          graph_path=Sdf.Path.emptyPath)  # pxr.Sdf.Path\n"
},
{
"title": "ChangePipelineStageCommand",
"description": "[omni.graph.core._impl.value_commands]\n\nChange Pipeline Stage. Change the pipeline stage of an existing graph.\n\nArgs:\n graph: The graph whose pipeline stage needs to be changed\n new_pipeline_stage: The new pipeline stage of the graph",
"snippet": "omni.kit.commands.execute(\"ChangePipelineStageCommand\",\n                          graph=graph,  # omni.graph.core._omni_graph_core.Graph\n                          new_pipeline_stage=new_pipeline_stage)  # omni.graph.core._omni_graph_core.GraphPipelineStage\n"
},
{
"title": "ConnectAttrWithSubgraphCommand",
"description": "[omni.graph.window.core.graph_commands]\n\nConnect with subgraph attribute, since og doesn't support subgraph attribute yet,\nwe cant use `og.cmds.ConnectAttrs`\n\n### Arguments:\n\n `src_path : Sdf.Path`\n The src path of the connection.\n\n `dest_path : Sdf.Path`\n The dest path of the connection.\n\n `stage : Optional[int]`\n The stage it's necessary to create new connection. If None, it takes\n the stage from the USD Context.",
"snippet": "omni.kit.commands.execute(\"ConnectAttrWithSubgraphCommand\",\n                          src_path=src_path,  # pxr.Sdf.Path\n                          dest_path=dest_path,  # pxr.Sdf.Path\n                          allow_remove=True,  # bool\n                          stage=None)\n"
},
{
"title": "ConnectAttrsCommand",
"description": "[omni.graph.core._impl.topology_commands]\n\nConnect Attrs. Causes two attributes to be connected together in the omnigraph\n\nArgs:\n src_attr: The source (upstream) attribute. This can be specified in the form\n of an attribute from a node, or a string that denotes the path to the attribute\n in USD. If specified as a string path, if the node happens to be a prim and\n the prim doesn't yet have prim node created for it, this command will create\n one automatically.\n dest_attr: The destination (downstream) attribute. This can be specified in the form\n of an attribute from a node, or a string that denotes the path to the attribute\n in USD. If specified as a string path, if the node happens to be a prim and\n the prim doesn't yet have prim node created for it, this command will create\n one automatically.\n modify_usd: Whether to modify the underlying usd stage with this connection\n connection_type: Whether this is regular connection or something ore fancy, like data only\n and execution only connections",
"snippet": "omni.kit.commands.execute(\"ConnectAttrsCommand\",\n                          src_attr=src_attr,  # typing.Union[str, omni.graph.core._omni_graph_core.Attribute]\n                          dest_attr=dest_attr,  # typing.Union[str, omni.graph.core._omni_graph_core.Attribute]\n                          modify_usd=modify_usd,  # bool\n                          connection_type=ConnectionType.CONNECTION_TYPE_REGULAR)  # omni.graph.core._omni_graph_core.ConnectionType\n"
},
{
"title": "ConnectPrimCommand",
"description": "[omni.graph.core._impl.topology_commands]\n\nConnect Prim. Connects a bundle attribute to a prim. This can be both for\nbundle purposes or for \"pure relationship\" type connections where we just want a relationship\nthat points to a prim, without the connotations associated with bundles.\n\nArgs:\n attr: The relationship attribute. This can be specified in the form\n of an attribute from a node, or a string that denotes the path to the attribute in USD.\n\n prim_path: The path to the prim that is to be the target of the relationship.\n is_bundle_connection: Whether this connection represents a bundle connection or just a\n regular relationship",
"snippet": "omni.kit.commands.execute(\"ConnectPrimCommand\",\n                          attr=attr,  # typing.Union[str, omni.graph.core._omni_graph_core.Attribute]\n                          prim_path=prim_path,  # str\n                          is_bundle_connection=is_bundle_connection)  # bool\n"
},
{
"title": "CreateAttrCommand",
"description": "[omni.graph.core._impl.topology_commands]\n\nCreate Attribute. Adds a new dynamic attribute to a node.\n\nArgs:\n node: Node on which to create the attribute (path or og.Node)\n attr_name: Name of the new attribute, either with or without the port namespace\n attr_type: Type of the new attribute, as an OGN type string or og.Type\n attr_port: Port type of the new attribute, default is og.AttributePortType.ATTRIBUTE_PORT_TYPE_INPUT\n attr_default: The initial value to set on the attribute, default is None, meaning the type's default is used\n attr_extended_type: The extended type of the attribute, default is\n og.ExtendedAttributeType.EXTENDED_ATTR_TYPE_REGULAR. If the extended type is\n og.ExtendedAttributeType.EXTENDED_ATTR_TYPE_UNION then this parameter will be a\n 2-tuple with the second element being a list or comma-separated string of union types\n\nIf there is any problem with the do/undo of the attribute creation a warning is issued and the command fails.",
"snippet": "omni.kit.commands.execute(\"CreateAttrCommand\",\n                          node=node,  # typing.Union[str, omni.graph.core._omni_graph_core.Node, pxr.Sdf.Path, pxr.Usd.Prim, pxr.Usd.Typed]\n                          attr_name=attr_name,  # str\n                          attr_type=attr_type,  # typing.Union[str, omni.graph.core._omni_graph_core.Type]\n                          attr_port=AttributePortType.ATTRIBUTE_PORT_TYPE_INPUT,  # typing.Union[omni.graph.core._omni_graph_core.AttributePortType, NoneType]\n                          attr_default=None,  # typing.Union[typing.Any, NoneType]\n                          attr_extended_type=ExtendedAttributeType.EXTENDED_ATTR_TYPE_REGULAR)  # typing.Union[omni.graph.core._omni_graph_core.AttributePortType, typing.Tuple[omni.graph.core._omni_graph_core.AttributePortType, typing.Union[str, typing.List[str]]], NoneType]\n"
},
{
"title": "CreateGraphAsNodeCommand",
"description": "[omni.graph.core._impl.topology_commands]\n\nCreate Graph As Node. Creates a new graph wrapped by a node.\n\nArgs:\n graph: The graph in which the new wrapper node should be created\n node_name: The name of the node\n graph_path: The path to the graph\n evaluator_name: The name of the evaluator to use for the graph\n is_global_graph: Whether this is a global graph (global level graphs have their own FC)\n backed_by_usd: Whether the constructs are to be backed by USD\n fc_backing_type: What kind of Flatcache backs this graph\n pipeline_stage: What pipeline stage does this graph occupy: simulation, prerender, or postrender\n",
"snippet": "omni.kit.commands.execute(\"CreateGraphAsNodeCommand\",\n                          graph=graph,\n                          node_name=node_name,\n                          graph_path=graph_path,\n                          evaluator_name=evaluator_name,\n                          is_global_graph=is_global_graph,\n                          backed_by_usd=backed_by_usd,\n                          fc_backing_type=fc_backing_type,\n                          pipeline_stage=pipeline_stage)\n"
},
{
"title": "CreateNodeCommand",
"description": "[omni.graph.core._impl.topology_commands]\n\nCreate Node. Creates a new compute node of a particular node type in OmniGraph\n\nArgs:\n graph: The graph in which the new compute node should be created\n node_path: The location in the USD stage to add the new compute node\n node_type: The name of the type of compute node to create\n create_usd: Whether to also create an USD prim on the stage for this node",
"snippet": "omni.kit.commands.execute(\"CreateNodeCommand\",\n                          graph=graph,\n                          node_path=node_path,\n                          node_type=node_type,\n                          create_usd=create_usd)\n"
},
{
"title": "CreatePortCommand",
"description": "[omni.graph.window.core.graph_commands]\n\nCreate port on the subgraph prim, since og doesn't support subgraph attribute yet\n\n### Arguments:\n\n `prim_path : Sdf.Path`\n The path of the prim we need to add the new port.\n\n `port_name : str`\n The name of the port. The attribute name will be `outputs:port_name`.\n\n `port_type : Sdf.ValueTypeName`\n The type of the port.\n\n `stage : Optional[int]`\n The stage it's necessary to add the new port. If None, it takes\n the stage from the USD Context.",
"snippet": "omni.kit.commands.execute(\"CreatePortCommand\",\n                          prim_path=prim_path,  # pxr.Sdf.Path\n                          port_name=port_name,  # str\n                          port_type=port_type,  # pxr.Sdf.ValueTypeName\n                          stage=None)\n"
},
{
"title": "CreateSubgraphCommand",
"description": "[omni.graph.core._impl.topology_commands]\n\nCreate Subgraph. Creates a new subgraph node in OmniGraph\n\nArgs:\n graph: The graph in which the new compute node should be created\n subgraph_path: The location in the USD stage to add the new compute node",
"snippet": "omni.kit.commands.execute(\"CreateSubgraphCommand\",\n                          graph=graph,\n                          subgraph_path=subgraph_path,\n                          evaluator=None,\n                          create_usd=True)\n"
},
{
"title": "CreateVariableCommand",
"description": "[omni.graph.core._impl.topology_commands]\n\nCreate Variable. Creates a new variable of a particular type in OmniGraph\n\nArgs:\n graph: The graph in which the new variable should be created\n variable_name: The name of the new variable\n variable_type: The OmniGraph type of the new variable\n graph_context: The OmniGraph context to use when setting the initial variable value\n variable_value: The initial variable value",
"snippet": "omni.kit.commands.execute(\"CreateVariableCommand\",\n                          graph=graph,  # omni.graph.core._omni_graph_core.Graph\n                          variable_name=variable_name,  # str\n                          variable_type=variable_type,  # omni.graph.core._omni_graph_core.Type\n                          graph_context=None,  # omni.graph.core._omni_graph_core.GraphContext\n                          variable_value=None)\n"
},
{
"title": "DeleteNodeCommand",
"description": "[omni.graph.core._impl.topology_commands]\n\nDelete Node. Delete the specified node in the graph\n\nArgs:\n graph: The graph in which the new compute node should be created\n node_path: The location in the USD stage to add the new compute node\n modify_usd: Whether to also delete the USD prim on the stage for this node",
"snippet": "omni.kit.commands.execute(\"DeleteNodeCommand\",\n                          graph=graph,\n                          node_path=node_path,\n                          modify_usd=modify_usd)\n"
},
{
"title": "DisableGraphCommand",
"description": "[omni.graph.core._impl.value_commands]\n\nDisable Graph. Causes a graph to be disabled\n\nArgs:\n graph: The graph to disable",
"snippet": "omni.kit.commands.execute(\"DisableGraphCommand\",\n                          graph=graph)\n"
},
{
"title": "DisableGraphUSDHandlerCommand",
"description": "[omni.graph.core._impl.value_commands]\n\nDisable Graph USD Handler. Causes a graph's USD\nnotice handdler to be disabled.\n\nArgs:\n graph: The graph to disable enotice handling",
"snippet": "omni.kit.commands.execute(\"DisableGraphUSDHandlerCommand\",\n                          graph=graph)  # omni.graph.core._omni_graph_core.Graph\n"
},
{
"title": "DisableNodeCommand",
"description": "[omni.graph.core._impl.value_commands]\n\nDisable Node. Causes a node to be disabled in the compute graph\n\nArgs:\n node: The node to disable",
"snippet": "omni.kit.commands.execute(\"DisableNodeCommand\",\n                          node=node)  # omni.graph.core._omni_graph_core.Node\n"
},
{
"title": "DisconnectAllAttrsCommand",
"description": "[omni.graph.core._impl.topology_commands]\n\nDisconnect All Attrs. Breaks every connection to and from an OmniGraph attribute\n\nArgs:\n attr: The attribute to be disconnected\n modify_usd: Whether to modify the underlying usd stage with this connection",
"snippet": "omni.kit.commands.execute(\"DisconnectAllAttrsCommand\",\n                          attr=attr,  # omni.graph.core._omni_graph_core.Attribute\n                          modify_usd=modify_usd)  # bool\n"
},
{
"title": "DisconnectAttrWithSubgraphCommand",
"description": "[omni.graph.window.core.graph_commands]\n\nDisconnect with subgraph attribute, since og doesn't support subgraph attribute yet,\nwe can't use `og.cmds.DisconnectAttrs`\n\n### Arguments:\n\n `src_path : Sdf.Path`\n The src path of the connection.\n\n `dest_path : Sdf.Path`\n The dest path of the connection.\n\n `stage : Optional[int]`\n The stage it's necessary to create new connection. If None, it takes\n the stage from the USD Context.",
"snippet": "omni.kit.commands.execute(\"DisconnectAttrWithSubgraphCommand\",\n                          src_path=src_path,  # pxr.Sdf.Path\n                          dest_path=dest_path,  # pxr.Sdf.Path\n                          stage=None)\n"
},
{
"title": "DisconnectAttrsBundleCommand",
"description": "[omni.graph.window.particle.system.particle_graph_commands]",
"snippet": "omni.kit.commands.execute(\"DisconnectAttrsBundleCommand\",\n                          src_attr=src_attr,\n                          dest_attr=dest_attr,\n                          modify_usd=modify_usd)\n"
},
{
"title": "DisconnectAttrsCommand",
"description": "[omni.graph.core._impl.topology_commands]\n\nDisconnect Attrs. Causes two attrs to be disconnected in OmniGraph\n\nArgs:\n src_attr: The source (upstream) attribute\n dest_attr: The destination (downstream) attribute\n modify_usd: Whether to modify the underlying usd stage with this connection",
"snippet": "omni.kit.commands.execute(\"DisconnectAttrsCommand\",\n                          src_attr=src_attr,\n                          dest_attr=dest_attr,\n                          modify_usd=modify_usd)\n"
},
{
"title": "DisconnectPrimCommand",
"description": "[omni.graph.core._impl.topology_commands]\n\nDisconnect Prim. Disconnects a bundle attribute from a prim. This can be both for\nbundle purposes or for \"pure relationship\" type connections where we just want a relationship\nthat points to a prim, without the connotations associated with bundles.\n\nArgs:\n attr: The relationship attribute. This can be specified in the form\n of an attribute from a node, or a string that denotes the path to the attribute in USD.\n\n prim_path: The path to the prim that is to be the target of the relationship.\n is_bundle_connection: Whether this connection represents a bundle connection or just a\n regular relationship",
"snippet": "omni.kit.commands.execute(\"DisconnectPrimCommand\",\n                          attr=attr,  # typing.Union[str, omni.graph.core._omni_graph_core.Attribute]\n                          prim_path=prim_path,  # str\n                          is_bundle_connection=is_bundle_connection)  # bool\n"
},
{
"title": "EnableGraphCommand",
"description": "[omni.graph.core._impl.value_commands]\n\nEnable Graph. Causes a graph to be enabled\n\nArgs:\n graph: The graph to enable",
"snippet": "omni.kit.commands.execute(\"EnableGraphCommand\",\n                          graph=graph)  # omni.graph.core._omni_graph_core.Graph\n"
},
{
"title": "EnableGraphUSDHandlerCommand",
"description": "[omni.graph.core._impl.value_commands]\n\nEnable Graph USD Handler. Causes a graph's USD\nnotice handdler to be enabled.\n\nArgs:\n graph: The graph to enable notice handling",
"snippet": "omni.kit.commands.execute(\"EnableGraphUSDHandlerCommand\",\n                          graph=graph)  # omni.graph.core._omni_graph_core.Graph\n"
},
{
"title": "EnableNodeCommand",
"description": "[omni.graph.core._impl.value_commands]\n\nEnable Node. Causes a node to be enabled in the compute graph\n\nArgs:\n node: The node to enable",
"snippet": "omni.kit.commands.execute(\"EnableNodeCommand\",\n                          node=node)  # omni.graph.core._omni_graph_core.Node\n"
},
{
"title": "OGRemoveUsdUIPositionAttrCommand",
"description": "[omni.graph.window.core.graph_commands]",
"snippet": "omni.kit.commands.execute(\"OGRemoveUsdUIPositionAttrCommand\",\n                          attribute=attribute,  # str\n                          prim_path=prim_path,  # pxr.Sdf.Path\n                          value=value,\n                          prev=prev,\n                          stage=None)  # pxr.Usd.Stage\n"
},
{
"title": "OGSetUsdUINodeGraphNodeAttrCommand",
"description": "[omni.graph.window.core.graph_commands]",
"snippet": "omni.kit.commands.execute(\"OGSetUsdUINodeGraphNodeAttrCommand\",\n                          attribute=attribute,  # str\n                          prim_path=prim_path,  # pxr.Sdf.Path\n                          value=value,\n                          prev=prev,\n                          stage=None)  # pxr.Usd.Stage\n"
},
{
"title": "RemoveAttrCommand",
"description": "[omni.graph.core._impl.topology_commands]\n\nRemove Attribute. Removes an existing dynamic attribute from a node.\n\nArgs:\n attribute: Name of the attribute to be removed\n\nIf there is any problem with the do/undo of the attribute removal a warning is issue and the command fails",
"snippet": "omni.kit.commands.execute(\"RemoveAttrCommand\",\n                          attribute=attribute)  # omni.graph.core._omni_graph_core.Attribute\n"
},
{
"title": "RemoveOmniGraphAPICommand",
"description": "[omni.graph.instancing.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"RemoveOmniGraphAPICommand\",\n                          layer=None,  # pxr.Sdf.Layer\n                          paths=[])  # typing.List[pxr.Sdf.Path]\n"
},
{
"title": "RemoveVariableCommand",
"description": "[omni.graph.core._impl.topology_commands]\n\nRemove Variable. Remove the specified variable in the graph\n\nArgs:\n graph: The graph to remove the variable from\n variable: The OmniGraph IVariable to be removed\n graph_context: The OmniGraph context to use when restoring the variable value on undo",
"snippet": "omni.kit.commands.execute(\"RemoveVariableCommand\",\n                          graph=graph,  # omni.graph.core._omni_graph_core.Graph\n                          variable=variable,  # omni.graph.core._omni_graph_core.IVariable\n                          graph_context=None)  # omni.graph.core._omni_graph_core.GraphContext\n"
},
{
"title": "RenameNodeCommand",
"description": "[omni.graph.core._impl.value_commands]\n\nRename Node. Renames an existing node in a compute graph\n\nArgs:\n graph: The graph in which the node is located\n path: The location in the USD stage\n new_path: The new path of the node",
"snippet": "omni.kit.commands.execute(\"RenameNodeCommand\",\n                          graph=graph,  # omni.graph.core._omni_graph_core.Graph\n                          path=path,  # str\n                          new_path=new_path)  # str\n"
},
{
"title": "RenameSubgraphCommand",
"description": "[omni.graph.core._impl.value_commands]\n\nRename Subgraph. Renames an existing subgraph in a compute graph\n\nArgs:\n graph: The graph in which the subgraph is located\n path: The location in the USD stage\n new_path: The new path of the subgraph",
"snippet": "omni.kit.commands.execute(\"RenameSubgraphCommand\",\n                          graph=graph,  # omni.graph.core._omni_graph_core.Graph\n                          path=path,  # str\n                          new_path=new_path)  # str\n"
},
{
"title": "RenamedClass.<locals>.RenamedClass",
"description": "[omni.graph.tools._impl.deprecate]",
"snippet": "omni.kit.commands.execute(\"RenamedClass.<locals>.RenamedClass\",\n                          attribute_data=attribute_data,  # omni.graph.core._omni_graph_core.AttributeData\n                          value=value,  # typing.Union[typing.Any, omni.graph.core._impl.utils.TypedValue]\n                          graph=None,  # typing.Union[omni.graph.core._omni_graph_core.Graph, NoneType]\n                          on_gpu=False)  # bool\n"
},
{
"title": "SetAttrCommand",
"description": "[omni.graph.core._impl.value_commands]\n\nSetAttr. Sets the value of an attribute on a node\n\nArgs:\n attr: The attribute to set\n value: The value to set the attribute to\n set_type: The OGN type name to set the attribute to for extended attributes that require Type resolution.\n You can also embed the type in the value using a TypedValue\n on_gpu: If True then set the value in the GPU memory, otherwise CPU memory\n update_usd: If True then immediately propagate the new value to the USD backing, if it exists",
"snippet": "omni.kit.commands.execute(\"SetAttrCommand\",\n                          attr=attr,  # omni.graph.core._omni_graph_core.Attribute\n                          value=value,  # typing.Union[typing.Any, omni.graph.core._impl.utils.TypedValue]\n                          set_type=None,  # str\n                          on_gpu=False,  # bool\n                          update_usd=True)  # bool\n"
},
{
"title": "SetAttrDataCommand",
"description": "[omni.graph.core._impl.value_commands]\n\nSetAttrData. Sets the value of an attribute data\n\nArgs:\n attribute_data: The attribute data to set\n value: The value to be set\n graph: The graph to operate on (deprecated and unnecessary)\n on_gpu: If True then set the value in the GPU memory, otherwise CPU memory",
"snippet": "omni.kit.commands.execute(\"SetAttrDataCommand\",\n                          attribute_data=attribute_data,  # omni.graph.core._omni_graph_core.AttributeData\n                          value=value,  # typing.Union[typing.Any, omni.graph.core._impl.utils.TypedValue]\n                          graph=None,  # typing.Union[omni.graph.core._omni_graph_core.Graph, NoneType]\n                          on_gpu=False)  # bool\n"
},
{
"title": "SetVariableTooltipCommand",
"description": "[omni.graph.core._impl.value_commands]\n\nSet Variable Tooltip. Set the tooltip/description of a variable.\n\nArgs:\n variable: The variable to set the tooltip of\n tooltip: The tooltip text to set",
"snippet": "omni.kit.commands.execute(\"SetVariableTooltipCommand\",\n                          variable=variable,  # omni.graph.core._omni_graph_core.IVariable\n                          tooltip=tooltip)  # str\n"
},
{
"title": "SubdivideConnectionCommand",
"description": "[omni.graph.window.core.graph_commands]\n\nExample: graph: A->B->C->D->E->F, if A and F are the actual connection, while B and C are the user disconnect ports\nfrom ui. src_to_actual_src will be [B, A] and dest_to_actual_dest will be [C, D, E, F]. While we try to disconnect A\nand F, we need to create the sub-connections between A and F first. This is followed by a `og.cmds.DisconnectAttrs`\ncommand\n### Arguments:\n\n `src_to_actual_src : List[Sdf.Path]`\n This is a list of Sdf.Path from the ui src port until the connected actual src port\n\n `dest_to_actual_dest : List[Sdf.Path]`\n This is a list of Sdf.Path from the ui dest port until the connected actual dest port\n\n `stage : Optional[int]`\n The stage it's necessary to create new connection. If None, it takes\n the stage from the USD Context.",
"snippet": "omni.kit.commands.execute(\"SubdivideConnectionCommand\",\n                          src_to_actual_src=src_to_actual_src,  # typing.List[pxr.Sdf.Path]\n                          dest_to_actual_dest=dest_to_actual_dest,  # typing.List[pxr.Sdf.Path]\n                          stage=None)\n"
},
{
"title": "_OGRestoreConnectionsOnUndo",
"description": "[omni.graph.core._impl.topology_commands]\n\nRestore connections between OG nodes on undo. (Does nothing on do or redo.)\n\nThis command is for internal use only. It may be changed or removed\nwithout notice.\n\nArgs:\n connections (List[(str, str)])\n The connections to be restored. Each element of the list is a tuple\n containing the path strings for the source and destination attributes.",
"snippet": "omni.kit.commands.execute(\"_OGRestoreConnectionsOnUndo\",\n                          connections=connections)  # typing.List[typing.Tuple[str, str]]\n"
}
]
},
{
"title": "omni.isaac",
"snippets": [
{
"title": "CreateSurfaceGripper",
"description": "[omni.isaac.surface_gripper.scripts.commands]\n\nCommands class to create a Utility to control .\n\nTypical usage example:\n\n.. code-block:: python\n\n result, prim = omni.kit.commands.execute(\n \"RangeSensorCreateGeneric\",\n path=\"/GenericSensor\",\n parent=None,\n min_range=0.4,\n max_range=100.0,\n draw_points=False,\n draw_lines=False,\n sampling_rate=60,\n )",
"snippet": "omni.kit.commands.execute(\"CreateSurfaceGripper\",\n                          prim_name=\"SurfaceGripperActionGraph\",  # str\n                          surface_gripper_prim=None)\n"
},
{
"title": "DiffUSD",
"description": "[omni.isaac.diff_usd.extension]\n\nThe DiffUSD command compares two selected prims using difflib's unified diff format.",
"snippet": "omni.kit.commands.execute(\"DiffUSD\",\n                          text_diff=False)\n"
},
{
"title": "IsaacSensorCreateContactSensor",
"description": "[omni.isaac.isaac_sensor.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"IsaacSensorCreateContactSensor\",\n                          path=\"/Contact_Sensor\",  # str\n                          parent=None,  # str\n                          visualize=False,  # bool\n                          min_threshold=0,  # float\n                          max_threshold=100000,  # float\n                          color=(1, 1, 1, 1),  # pxr.Gf.Vec4f\n                          radius=-1,  # float\n                          sensor_period=-1,  # float\n                          translation=(0, 0, 0))  # pxr.Gf.Vec3d\n"
},
{
"title": "IsaacSensorCreateImuSensor",
"description": "[omni.isaac.isaac_sensor.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"IsaacSensorCreateImuSensor\",\n                          path=\"/Imu_Sensor\",  # str\n                          parent=None,  # str\n                          visualize=False,  # bool\n                          sensor_period=-1,  # float\n                          translation=(0, 0, 0),  # pxr.Gf.Vec3d\n                          orientation=(1, 0, 0, 0))  # pxr.Gf.Quatd\n"
},
{
"title": "IsaacSensorCreatePrim",
"description": "[omni.isaac.isaac_sensor.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"IsaacSensorCreatePrim\",\n                          path=\"\",  # str\n                          parent=\"\",  # str\n                          visualize=False,  # bool\n                          translation=(0, 0, 0),  # pxr.Gf.Vec3d\n                          orientation=(1, 0, 0, 0),  # pxr.Gf.Quatd\n                          schema_type=omni.isaac.IsaacSensorSchema.IsaacBaseSensor)\n"
},
{
"title": "IsaacSensorCreateRtxLidar",
"description": "[omni.isaac.isaac_sensor.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"IsaacSensorCreateRtxLidar\",\n                          path=\"/RtxLidar\",  # str\n                          parent=None,  # str\n                          config=\"Example_Rotary\",  # str\n                          translation=(0, 0, 0),  # pxr.Gf.Vec3d\n                          orientation=(1, 0, 0, 0))  # pxr.Gf.Quatd\n"
},
{
"title": "IsaacSimDestroyPrim",
"description": "[omni.isaac.utils.scripts.commands]\n\nCommand to set a delete a prim. This variant has less overhead than other commands as it doesn't store an undo operation\n\n Typical usage example:\n\n .. code-block:: python\n\n omni.kit.commands.execute(\n \"IsaacSimDestroyPrim\",\n prim_path=\"/World/Prim,\n )",
"snippet": "omni.kit.commands.execute(\"IsaacSimDestroyPrim\",\n                          prim_path=prim_path)  # str\n"
},
{
"title": "IsaacSimScalePrim",
"description": "[omni.isaac.utils.scripts.commands]\n\nCommand to set a scale of a prim\n\n Typical usage example:\n\n .. code-block:: python\n\n omni.kit.commands.execute(\n \"IsaacSimScalePrim\",\n prim_path=\"/World/Prim,\n scale=(1.5, 1.5, 1.5),\n )",
"snippet": "omni.kit.commands.execute(\"IsaacSimScalePrim\",\n                          prim_path=prim_path,  # str\n                          scale=(0, 0, 0))  # carb._carb.Float3\n"
},
{
"title": "IsaacSimSpawnPrim",
"description": "[omni.isaac.utils.scripts.commands]\n\nCommand to spawn a new prim in the stage and set its transform. This uses dynamic_control to properly handle physics objects and articulation\n\n Typical usage example:\n\n .. code-block:: python\n\n omni.kit.commands.execute(\n \"IsaacSimSpawnPrim\",\n usd_path=\"/path/to/file.usd\",\n prim_path=\"/World/Prim,\n translation=(0, 0, 0),\n rotation=(0, 0, 0, 1),\n )",
"snippet": "omni.kit.commands.execute(\"IsaacSimSpawnPrim\",\n                          usd_path=usd_path,  # str\n                          prim_path=prim_path,  # str\n                          translation=(0, 0, 0),  # carb._carb.Float3\n                          rotation=(0, 0, 0, 1))  # carb._carb.Float4\n"
},
{
"title": "IsaacSimTeleportPrim",
"description": "[omni.isaac.utils.scripts.commands]\n\nCommand to set a transform of a prim. This uses dynamic_control to properly handle physics objects and articulation\n\n Typical usage example:\n\n .. code-block:: python\n\n omni.kit.commands.execute(\n \"IsaacSimTeleportPrim\",\n prim_path=\"/World/Prim,\n translation=(0, 0, 0),\n rotation=(0, 0, 0, 1),\n )",
"snippet": "omni.kit.commands.execute(\"IsaacSimTeleportPrim\",\n                          prim_path=prim_path,  # str\n                          translation=(0, 0, 0),  # carb._carb.Float3\n                          rotation=(0, 0, 0, 1))  # carb._carb.Float4\n"
},
{
"title": "MJCFCreateAsset",
"description": "[omni.isaac.mjcf.scripts.commands]\n\nThis command parses and imports a given mjcf file.\n\nArgs:\n arg0 (:obj:`str`): The absolute path the mjcf file\n\n arg1 (:obj:`omni.isaac.mjcf._mjcf.ImportConfig`): Import configuration\n\n arg2 (:obj:`str`): Path to the robot on the USD stage",
"snippet": "omni.kit.commands.execute(\"MJCFCreateAsset\",\n                          mjcf_path=\"\",  # str\n                          import_config=<omni.isaac.mjcf._mjcf.ImportConfig object at 0x7f1fa5608d30>,\n                          prim_path=\"\")  # str\n"
},
{
"title": "MJCFCreateImportConfig",
"description": "[omni.isaac.mjcf.scripts.commands]\n\nReturns an ImportConfig object that can be used while parsing and importing.\nShould be used with the `MJCFCreateAsset` command\n\nReturns:\n :obj:`omni.isaac.mjcf._mjcf.ImportConfig`: Parsed MJCF stored in an internal structure.\n",
"snippet": "omni.kit.commands.execute(\"MJCFCreateImportConfig\")\n"
},
{
"title": "RangeSensorCreateGeneric",
"description": "[omni.isaac.range_sensor.scripts.commands]\n\nCommands class to create a generic range sensor.\n\n Typical usage example:\n\n .. code-block:: python\n\n result, prim = omni.kit.commands.execute(\n \"RangeSensorCreateGeneric\",\n path=\"/GenericSensor\",\n parent=None,\n min_range=0.4,\n max_range=100.0,\n draw_points=False,\n draw_lines=False,\n sampling_rate=60,\n )",
"snippet": "omni.kit.commands.execute(\"RangeSensorCreateGeneric\",\n                          path=\"/GenericSensor\",  # str\n                          parent=None,\n                          min_range=0.4,  # float\n                          max_range=100.0,  # float\n                          draw_points=False,  # bool\n                          draw_lines=False,  # bool\n                          sampling_rate=60)  # int\n"
},
{
"title": "RangeSensorCreateLidar",
"description": "[omni.isaac.range_sensor.scripts.commands]\n\nCommands class to create a lidar sensor.\n\n Typical usage example:\n\n .. code-block:: python\n\n result, prim = omni.kit.commands.execute(\n \"RangeSensorCreateLidar\",\n path=\"/Lidar\",\n parent=None,\n min_range=0.4,\n max_range=100.0,\n draw_points=False,\n draw_lines=False,\n horizontal_fov=360.0,\n vertical_fov=30.0,\n horizontal_resolution=0.4,\n vertical_resolution=4.0,\n rotation_rate=20.0,\n high_lod=False,\n yaw_offset=0.0,\n enable_semantics=False,\n )",
"snippet": "omni.kit.commands.execute(\"RangeSensorCreateLidar\",\n                          path=\"/Lidar\",  # str\n                          parent=None,\n                          min_range=0.4,  # float\n                          max_range=100.0,  # float\n                          draw_points=False,  # bool\n                          draw_lines=False,  # bool\n                          horizontal_fov=360.0,  # float\n                          vertical_fov=30.0,  # float\n                          horizontal_resolution=0.4,  # float\n                          vertical_resolution=4.0,  # float\n                          rotation_rate=20.0,  # float\n                          high_lod=False,  # bool\n                          yaw_offset=0.0,  # float\n                          enable_semantics=False)  # bool\n"
},
{
"title": "RangeSensorCreatePrim",
"description": "[omni.isaac.range_sensor.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"RangeSensorCreatePrim\",\n                          path=\"\",  # str\n                          parent=\"\",  # str\n                          scehma_type=omni.isaac.RangeSensorSchema.RangeSensor,\n                          min_range=0.4,  # float\n                          max_range=100.0,  # float\n                          draw_points=False,  # bool\n                          draw_lines=False)  # bool\n"
},
{
"title": "RangeSensorCreateUltrasonicArray",
"description": "[omni.isaac.range_sensor.scripts.commands]\n\nCommands class to create an ultrasonic array.\n\n Typical usage example:\n\n .. code-block:: python\n\n result, prim = omni.kit.commands.execute(\n \"RangeSensorCreateUltrasonicArray\",\n path=\"/UltrasonicArray\",\n parent=None,\n min_range=0.4,\n max_range=3.0,\n draw_points=False,\n draw_lines=False,\n horizontal_fov=15.0,\n vertical_fov=10.0,\n horizontal_resolution=0.5,\n vertical_resolution=0.5,\n num_bins=224,\n use_brdf: bool = False,\n use_uss_materials: bool = False,\n emitter_prims=[],\n firing_group_prims=[],\n )",
"snippet": "omni.kit.commands.execute(\"RangeSensorCreateUltrasonicArray\",\n                          path=\"/UltrasonicArray\",  # str\n                          parent=None,\n                          min_range=0.4,  # float\n                          max_range=100.0,  # float\n                          draw_points=False,  # bool\n                          draw_lines=False,  # bool\n                          horizontal_fov=360.0,  # float\n                          vertical_fov=30.0,  # float\n                          rotation_rate=20.0,  # float\n                          horizontal_resolution=0.4,  # float\n                          vertical_resolution=4.0,  # float\n                          num_bins=224,  # int\n                          use_brdf=False,  # bool\n                          use_uss_materials=False,  # bool\n                          emitter_prims=[],  # []\n                          firing_group_prims=[])  # []\n"
},
{
"title": "RangeSensorCreateUltrasonicEmitter",
"description": "[omni.isaac.range_sensor.scripts.commands]\n\nCommands class to create an ultrasonic emitter.\n\n Typical usage example:\n\n .. code-block:: python\n\n result, prim = omni.kit.commands.execute(\n \"RangeSensorCreateUltrasonicEmitter\",\n path=\"/UltrasonicEmitter\",\n parent=None,\n per_ray_intensity=1.0,\n yaw_offset=0.0,\n adjacency_list=[],\n )",
"snippet": "omni.kit.commands.execute(\"RangeSensorCreateUltrasonicEmitter\",\n                          path=\"/UltrasonicEmitter\",  # str\n                          parent=None,\n                          per_ray_intensity=1.0,  # float\n                          yaw_offset=0.0,  # float\n                          adjacency_list=[])  # []\n"
},
{
"title": "RangeSensorCreateUltrasonicFiringGroup",
"description": "[omni.isaac.range_sensor.scripts.commands]\n\nCommands class to create an ultrasonic firing group.\n\n Typical usage example:\n\n .. code-block:: python\n\n result, prim = omni.kit.commands.execute(\n \"RangeSensorCreateUltrasonicFiringGroup\",\n path=\"/UltrasonicFiringGroup\",\n parent=None,\n emitter_modes=[],\n receiver_modes=[],\n )",
"snippet": "omni.kit.commands.execute(\"RangeSensorCreateUltrasonicFiringGroup\",\n                          path=\"/UltrasonicFiringGroup\",  # str\n                          parent=None,\n                          emitter_modes=[],  # []\n                          receiver_modes=[])  # []\n"
},
{
"title": "URDFCreateImportConfig",
"description": "[omni.isaac.urdf.scripts.commands]\n\nReturns an ImportConfig object that can be used while parsing and importing.\nShould be used with `URDFParseFile` and `URDFParseAndImportFile` commands\n\nReturns:\n :obj:`omni.isaac.urdf._urdf.ImportConfig`: Parsed URDF stored in an internal structure.\n",
"snippet": "omni.kit.commands.execute(\"URDFCreateImportConfig\")\n"
},
{
"title": "URDFParseAndImportFile",
"description": "[omni.isaac.urdf.scripts.commands]\n\nThis command parses and imports a given urdf and returns a UrdfRobot object\n\nArgs:\n arg0 (:obj:`str`): The absolute path to where the urdf file is\n\n arg1 (:obj:`omni.isaac.urdf._urdf.ImportConfig`): Import Configuration\n\n arg2 (:obj:`str`): destination path for robot usd. Default is \"\" which will load the robot in-memory on the open stage.\n\nReturns:\n :obj:`str`: Path to the robot on the USD stage.",
"snippet": "omni.kit.commands.execute(\"URDFParseAndImportFile\",\n                          urdf_path=\"\",  # str\n                          import_config=<omni.isaac.urdf._urdf.ImportConfig object at 0x7f20d81845f0>,\n                          dest_path=\"\")  # str\n"
},
{
"title": "URDFParseFile",
"description": "[omni.isaac.urdf.scripts.commands]\n\nThis command parses a given urdf and returns a UrdfRobot object\n\nArgs:\n arg0 (:obj:`str`): The absolute path to where the urdf file is\n\n arg1 (:obj:`omni.isaac.urdf._urdf.ImportConfig`): Import Configuration\n\nReturns:\n :obj:`omni.isaac.urdf._urdf.UrdfRobot`: Parsed URDF stored in an internal structure.",
"snippet": "omni.kit.commands.execute(\"URDFParseFile\",\n                          urdf_path=\"\",  # str\n                          import_config=<omni.isaac.urdf._urdf.ImportConfig object at 0x7f20d81843f0>)  # omni.isaac.urdf._urdf.ImportConfig\n"
}
]
},
{
"title": "omni.kit",
"snippets": [
{
"title": "AbstractLayerCommand",
"description": "[omni.kit.usd.layers.impl.layer_commands]\n\nAbstract base class for layer commands.\nIt's mainly responsible to create a commmon class\nto recover layer selection in layer window, and\nedit target for USD Stage in undo.",
"snippet": "omni.kit.commands.execute(\"AbstractLayerCommand\",\n                          context_name_or_instance=\"\")  # typing.Union[str, omni.usd._usd.UsdContext]\n"
},
{
"title": "AddItemToCollection",
"description": "[omni.kit.widget.collection.commands]",
"snippet": "omni.kit.commands.execute(\"AddItemToCollection\",\n                          path_to_add=path_to_add,  # str\n                          collection_path=collection_path)  # str\n"
},
{
"title": "AddSbsarReferenceAndBindCommand",
"description": "[omni.kit.property.sbsar.commands]",
"snippet": "omni.kit.commands.execute(\"AddSbsarReferenceAndBindCommand\",\n                          sbsar_path=sbsar_path,\n                          target_prim_path=\"\",\n                          usd_context_name=\"\")\n"
},
{
"title": "AddXformOpCommand",
"description": "[omni.kit.property.transform.scripts.transform_commands]\n\nAdd and attritube's corresponding XformOp to xformOpOrder.\n\nArgs:\n op_attr_path (str): path of the xformOp attribute.\nExample: \n We might want to add xformOp:translate to the xformOpOrder token array\n Provided that xformOp:translate attribute exists and xformOp:translate is no in xformOpOrder",
"snippet": "omni.kit.commands.execute(\"AddXformOpCommand\",\n                          payload=payload,\n                          precision=precision,\n                          rotation_order=rotation_order,\n                          add_translate_op=add_translate_op,\n                          add_rotateXYZ_op=add_rotateXYZ_op,\n                          add_orient_op=add_orient_op,\n                          add_scale_op=add_scale_op,\n                          add_transform_op=add_transform_op,\n                          add_pivot_op=add_pivot_op)\n"
},
{
"title": "ApplySbsarOverridesCommand",
"description": "[omni.kit.property.sbsar.commands]\n\nApplySbsarOverrides. Applies current `inputs:sbsar:` USD attributes to the corresponding payload arguments\n\nArgs:\n stage: The USD Stage\n prim_paths: List of Material prim paths to process\n reset: When true, values will be reset to their default and applied",
"snippet": "omni.kit.commands.execute(\"ApplySbsarOverridesCommand\",\n                          prim_paths=prim_paths,\n                          reset=False,\n                          usd_context_name=\"\")\n"
},
{
"title": "ApplySkelBindingAPICommand",
"description": "[omni.kit.property.skel.scripts.command]",
"snippet": "omni.kit.commands.execute(\"ApplySkelBindingAPICommand\",\n                          layer=None,  # pxr.Sdf.Layer\n                          paths=[])  # typing.List[pxr.Sdf.Path]\n"
},
{
"title": "BakeAndReplaceSbsarMaterialCommand",
"description": "[omni.kit.property.sbsar.commands]",
"snippet": "omni.kit.commands.execute(\"BakeAndReplaceSbsarMaterialCommand\",\n                          material_prim_path=\"\",\n                          output_folder=\"\",\n                          preset=\"__default__\",\n                          resolution=\"RES_KEEP\",\n                          usd_context_name=\"\")\n"
},
{
"title": "BindMaterialExtCommand",
"description": "[omni.kit.property.physx.externals]",
"snippet": "omni.kit.commands.execute(\"BindMaterialExtCommand\",\n                          prim_path=prim_path,  # typing.Union[str, list]\n                          material_path=material_path,  # str\n                          strength=None,\n                          material_purpose=\"\")\n"
},
{
"title": "BlockCollection",
"description": "[omni.kit.widget.collection.commands]",
"snippet": "omni.kit.commands.execute(\"BlockCollection\",\n                          collection_path=collection_path)  # str\n"
},
{
"title": "ChangePrimVarCommand",
"description": "[omni.kit.browser.material.commands]\n\nChange prim var undoable.\n\nArgs:\n prim_path (str): Prim path.\n primvar_name (str): Name of primvar\n value: Value to change to.\n prev: Value to undo to. Default is None, means to use previous primvar value if exists.\n type_to_create_if_not_exist: If not None AND primvar does not already exist, a new primvar will be created with given type and value.",
"snippet": "omni.kit.commands.execute(\"ChangePrimVarCommand\",\n                          prim_path=prim_path,  # str\n                          primvar_name=primvar_name,  # str\n                          value=value,  # typing.Any\n                          prev=None,  # typing.Any\n                          type_to_create_if_not_exist=None)  # pxr.Sdf.ValueTypeNames\n"
},
{
"title": "ChangeRotationOpCommand",
"description": "[omni.kit.property.transform.scripts.transform_commands]\n\nChange the Rotation XformOp.\n\nArgs:\n src_op_attr_path (str): path of the source xformOp attribute.\n dst_op_attr_name (str): path of the destination xformOp attribute\n is_inverse_op (bool): if it is an inverse op, add an !invert! in the xformOpOrder\nExample: \n We may want to change from xformOp:rotateZYX to xformOp:rotateXYZ. It will\n 1) update the xformOpOrder\n 2) delete xformOp:rotateZYX attribute\n 3) create xformOp:rotateXYZ attribute\n 4) copy the xformOp:rotateZYX to xfomOp:rotateXYZ",
"snippet": "omni.kit.commands.execute(\"ChangeRotationOpCommand\",\n                          src_op_attr_path=src_op_attr_path,  # str\n                          op_name=op_name,  # str\n                          dst_op_attr_name=dst_op_attr_name,  # str\n                          is_inverse_op=is_inverse_op)  # bool\n"
},
{
"title": "ChangeSettingCommand",
"description": "[omni.kit.commands.builtin.settings_commands]\n\nChange setting.\n\nArgs:\n path: Path to the setting to change.\n value: New value to change to.\n prev: Previous value to for undo operation. If `None` current value would be saved as previous.",
"snippet": "omni.kit.commands.execute(\"ChangeSettingCommand\",\n                          path=path,\n                          value=value,\n                          prev=None)\n"
},
{
"title": "ClearCollection",
"description": "[omni.kit.widget.collection.commands]",
"snippet": "omni.kit.commands.execute(\"ClearCollection\",\n                          collection_path=collection_path)  # str\n"
},
{
"title": "Command",
"description": "[omni.kit.commands.command]\n\nBase class for all **Commands**.",
"snippet": "omni.kit.commands.execute(\"Command\")\n"
},
{
"title": "ConnectUsdShadeToSourceCommand",
"description": "[omni.kit.window.material_graph.usdshade_commands]\n\nUndoable UsdShade.Input.ConnectToSource",
"snippet": "omni.kit.commands.execute(\"ConnectUsdShadeToSourceCommand\",\n                          target=target,  # pxr.UsdShade.Input\n                          source=source)  # pxr.UsdShade.Output\n"
},
{
"title": "CreateAbstractPortCommand",
"description": "[omni.kit.window.material_graph.usdshade_commands]\n\nBase class for CreateInputPortCommand and for CreateOutputPortCommand\nthat has the shared code for both.",
"snippet": "omni.kit.commands.execute(\"CreateAbstractPortCommand\",\n                          prim_path=prim_path,  # pxr.Sdf.Path\n                          port_name=port_name,  # str\n                          port_type=port_type,  # pxr.Sdf.ValueTypeName\n                          stage=None)\n"
},
{
"title": "CreateAndBindMdlMaterialFromLibrary",
"description": "[omni.kit.material.library.material_library]\n\nCreates material prim from Core MDL Libray, and bind to provided prim list.\n\nArgs:\n mdl_name (str): MDL name from Core MDL Library.\n mtl_name (str): The material name from MDL. It's also the sub-identifier to be used for the shader.\n If `prim_name` param is not specified, it will also be used as the prim_name. If mtl_name is empty,\n it will use file name of `mdl_name` (without extension) by default.\n bind_selected_prims (List[Sdf.Path]): Prims to be bound to the new created material prim.\n select_new_prim: If it's to select the new created material prim.\n prim_name (str): The prim name to be created. It will be created with path \"/$RootPrimName/Looks/$prim_name\".\n If prim_name is not specified, it will use `mtl_name` instead.\n",
"snippet": "omni.kit.commands.execute(\"CreateAndBindMdlMaterialFromLibrary\",\n                          mdl_name=mdl_name,  # str\n                          mtl_name=\"\",  # str\n                          mtl_created_list=None,  # list\n                          bind_selected_prims=False,  # list\n                          select_new_prim=True,  # bool\n                          prim_name=\"\")  # str\n"
},
{
"title": "CreateAndBindPreviewSurfaceFromLibrary",
"description": "[omni.kit.material.library.material_library]",
"snippet": "omni.kit.commands.execute(\"CreateAndBindPreviewSurfaceFromLibrary\",\n                          mtl_created_list=None,  # list\n                          bind_selected_prims=False)  # list\n"
},
{
"title": "CreateAndBindPreviewSurfaceTextureFromLibrary",
"description": "[omni.kit.material.library.material_library]",
"snippet": "omni.kit.commands.execute(\"CreateAndBindPreviewSurfaceTextureFromLibrary\",\n                          mtl_created_list=None,  # list\n                          bind_selected_prims=False)  # list\n"
},
{
"title": "CreateCapsule",
"description": "[omni.kit.quicksearch.commands.quick_commands]",
"snippet": "omni.kit.commands.execute(\"CreateCapsule\")\n"
},
{
"title": "CreateCollection",
"description": "[omni.kit.widget.collection.commands]",
"snippet": "omni.kit.commands.execute(\"CreateCollection\",\n                          prim_path=prim_path,  # str\n                          collection_name=\"\")  # str\n"
},
{
"title": "CreateCone",
"description": "[omni.kit.quicksearch.commands.quick_commands]",
"snippet": "omni.kit.commands.execute(\"CreateCone\")\n"
},
{
"title": "CreateCube",
"description": "[omni.kit.quicksearch.commands.quick_commands]",
"snippet": "omni.kit.commands.execute(\"CreateCube\")\n"
},
{
"title": "CreateCylinder",
"description": "[omni.kit.quicksearch.commands.quick_commands]",
"snippet": "omni.kit.commands.execute(\"CreateCylinder\")\n"
},
{
"title": "CreateDynamicSkyCommand",
"description": "[omni.kit.environment.core.sky.commands]\n\nCreate dynamic sky undoable.\n\nArgs:\n sky_url (str): Url of sky\n sky_path (str): Prim path to create sky",
"snippet": "omni.kit.commands.execute(\"CreateDynamicSkyCommand\",\n                          sky_url=sky_url,  # str\n                          sky_path=sky_path)  # str\n"
},
{
"title": "CreateGroundCommand",
"description": "[omni.kit.environment.core.ground.commands]",
"snippet": "omni.kit.commands.execute(\"CreateGroundCommand\",\n                          prim_path=\"/Environment/ground\",  # str\n                          ground_size=100)  # float\n"
},
{
"title": "CreateHdriSkyCommand",
"description": "[omni.kit.environment.core.sky.commands]\n\nCreate hdri sky undoable.\n\nArgs:\n sky_url (str): Url of sky\n sky_path (str): Prim path to create sky",
"snippet": "omni.kit.commands.execute(\"CreateHdriSkyCommand\",\n                          sky_url=sky_url,  # str\n                          sky_path=sky_path)  # str\n"
},
{
"title": "CreateInputPortCommand",
"description": "[omni.kit.window.material_graph.usdshade_commands]\n\nCreate connectable input on the prim\n\n### Arguments:\n\n `prim_path : Sdf.Path`\n The path of the prim we need to add the new port.\n\n `port_name : str`\n The name of the port. The attribute name will be `inputs:port_name`.\n\n `port_type : Sdf.ValueTypeName`\n The type of the port.\n\n `stage : Optional[int]`\n The stage it's necessary to add the new prim. If None, it takes\n the stage from the USD Context.",
"snippet": "omni.kit.commands.execute(\"CreateInputPortCommand\",\n                          prim_path=prim_path,  # pxr.Sdf.Path\n                          port_name=port_name,  # str\n                          port_type=port_type,  # pxr.Sdf.ValueTypeName\n                          stage=None)\n"
},
{
"title": "CreateLayerReferenceCommand",
"description": "[omni.kit.usd.layers.impl.layer_commands]\n\nCreate reference in specific layer undoable.\n\nIt creates a new prim and adds the asset and path as references in specific layer.\n\nArgs:\n layer_identifier: str: Layer identifier to create prim inside.\n \n path_to (Sdf.Path): Path to create a new prim.\n \n asset_path (str): The asset it's necessary to add to references.\n \n prim_path (Sdf.Path): The prim in asset to reference.\n \n usd_context (Union[str, omni.usd.UsdContext]): Usd context name or instance. It uses default context if it's empty.",
"snippet": "omni.kit.commands.execute(\"CreateLayerReferenceCommand\",\n                          layer_identifier=layer_identifier,  # str\n                          path_to=path_to,  # pxr.Sdf.Path\n                          asset_path=None,  # str\n                          prim_path=None,  # pxr.Sdf.Path\n                          usd_context=\"\")  # typing.Union[str, omni.usd._usd.UsdContext]\n"
},
{
"title": "CreateMeshPrimCommand",
"description": "[omni.kit.primitive.mesh.command]",
"snippet": "omni.kit.commands.execute(\"CreateMeshPrimCommand\",\n                          prim_type=prim_type)  # str\n"
},
{
"title": "CreateMeshPrimWithDefaultXformCommand",
"description": "[omni.kit.primitive.mesh.command]",
"snippet": "omni.kit.commands.execute(\"CreateMeshPrimWithDefaultXformCommand\",\n                          prim_type=prim_type)  # str\n"
},
{
"title": "CreateOutputPortCommand",
"description": "[omni.kit.window.material_graph.usdshade_commands]\n\nCreate connectable output on the prim\n\n### Arguments:\n\n `prim_path : Sdf.Path`\n The path of the prim we need to add the new port.\n\n `port_name : str`\n The name of the port. The attribute name will be `outputs:port_name`.\n\n `port_type : Sdf.ValueTypeName`\n The type of the port.\n\n `stage : Optional[int]`\n The stage it's necessary to add the new prim. If None, it takes\n the stage from the USD Context.",
"snippet": "omni.kit.commands.execute(\"CreateOutputPortCommand\",\n                          prim_path=prim_path,  # pxr.Sdf.Path\n                          port_name=port_name,  # str\n                          port_type=port_type,  # pxr.Sdf.ValueTypeName\n                          stage=None)\n"
},
{
"title": "CreateSphere",
"description": "[omni.kit.quicksearch.commands.quick_commands]",
"snippet": "omni.kit.commands.execute(\"CreateSphere\")\n"
},
{
"title": "CreateSublayerCommand",
"description": "[omni.kit.usd.layers.impl.layer_commands]\n\nCreate Sublayer undoable.",
"snippet": "omni.kit.commands.execute(\"CreateSublayerCommand\",\n                          layer_identifier=layer_identifier,  # str\n                          sublayer_position=sublayer_position,  # int\n                          new_layer_path=new_layer_path,  # str\n                          transfer_root_content=transfer_root_content,  # bool\n                          create_or_insert=create_or_insert,  # bool\n                          layer_name=\"\",  # str\n                          usd_context=\"\")  # typing.Union[str, omni.usd._usd.UsdContext]\n"
},
{
"title": "CreateUsdUIBackdropCommand",
"description": "[omni.kit.graph.usd.commands.commands]",
"snippet": "omni.kit.commands.execute(\"CreateUsdUIBackdropCommand\",\n                          parent_path=parent_path,  # pxr.Sdf.Path\n                          identifier=identifier,  # str\n                          position=None,  # typing.Union[typing.Tuple[float], NoneType]\n                          size=None,  # typing.Union[typing.Tuple[float], NoneType]\n                          display_color=None,  # typing.Union[typing.Tuple[float], NoneType]\n                          stage=None)  # typing.Union[pxr.Usd.Stage, NoneType]\n"
},
{
"title": "DebugBreak",
"description": "[omni.kit.debug.vscode_debugger]",
"snippet": "omni.kit.commands.execute(\"DebugBreak\")\n"
},
{
"title": "DeleteCollection",
"description": "[omni.kit.widget.collection.commands]",
"snippet": "omni.kit.commands.execute(\"DeleteCollection\",\n                          collection_path=collection_path)  # str\n"
},
{
"title": "DuplicateCameraCommand",
"description": "[omni.kit.viewport.menubar.camera.commands]\n\nDuplicates a camera at a specific time\n\nArgs:\n camera_path (str): name of the camera to duplicate.\n time (float): Time at which to duplicate, or None to use active time\n usd_context_name (str): The name of a valid omni.UsdContext to target\n new_camera_path (str): Path to create the new camera at (None for automatic path)",
"snippet": "omni.kit.commands.execute(\"DuplicateCameraCommand\",\n                          camera_path=\"\",  # str\n                          time=None,  # float\n                          usd_context_name=\"\",  # str\n                          new_camera_path=None)  # str\n"
},
{
"title": "DuplicateCollection",
"description": "[omni.kit.widget.collection.commands]\n\nDuplicate a collection under the same prim path\nwe just want to use the same logic as prim duplicate and add a numeric counter to the end",
"snippet": "omni.kit.commands.execute(\"DuplicateCollection\",\n                          collection_path=collection_path,  # str\n                          new_collection_name=\"\")  # str\n"
},
{
"title": "DuplicateFromActiveViewportCameraCommand",
"description": "[omni.kit.viewport_legacy.scripts.commands]\n\nDuplicates Viewport's actively bound camera and bind active camera to the duplicated one.\n\nArgs:\n viewport_name (str): name of the viewport to set active camera (for multi-viewport).",
"snippet": "omni.kit.commands.execute(\"DuplicateFromActiveViewportCameraCommand\",\n                          viewport_name=\"\")  # str\n"
},
{
"title": "DuplicateViewportCameraCommand",
"description": "[omni.kit.viewport.menubar.camera.commands]\n\nDuplicates a Viewport's actively bound camera and bind active camera to the duplicated one.\n\nArgs:\n viewport_api: The viewport to target",
"snippet": "omni.kit.commands.execute(\"DuplicateViewportCameraCommand\",\n                          viewport_api=viewport_api)\n"
},
{
"title": "EnableXformOpCommand",
"description": "[omni.kit.property.transform.scripts.transform_commands]\n\nAdd and attritube's corresponding XformOp to xformOpOrder.\n\nArgs:\n op_attr_path (str): path of the xformOp attribute.\nExample: \n We might want to add xformOp:translate to the xformOpOrder token array\n Provided that xformOp:translate attribute exists and xformOp:translate is no in xformOpOrder",
"snippet": "omni.kit.commands.execute(\"EnableXformOpCommand\",\n                          op_attr_path=op_attr_path)  # str\n"
},
{
"title": "ExcludeItemFromCollection",
"description": "[omni.kit.widget.collection.commands]\n\nAdd the item to the exclude list",
"snippet": "omni.kit.commands.execute(\"ExcludeItemFromCollection\",\n                          prim_or_prop_path=prim_or_prop_path,  # str\n                          collection_path=collection_path)  # str\n"
},
{
"title": "FlattenLayersCommand",
"description": "[omni.kit.usd.layers.impl.layer_commands]\n\nFlatten Layers undoable.",
"snippet": "omni.kit.commands.execute(\"FlattenLayersCommand\",\n                          usd_context=\"\")  # typing.Union[str, omni.usd._usd.UsdContext]\n"
},
{
"title": "HideUnselectedCommand",
"description": "[omni.kit.selection.selection]",
"snippet": "omni.kit.commands.execute(\"HideUnselectedCommand\")\n"
},
{
"title": "ImportCompoundCommand",
"description": "[omni.kit.window.material_graph.usdshade_commands]\n\nImport compound shader from external USD file.\n\n### Arguments:\n\n `parent_path : Sdf.Path`\n The path of the prim we need to add the new compound to.\n\n `source_asset : str`\n The path of the external usd file. It's important the default\n prim in this layer is the NodeGraph prim.\n\n `identifier : str`\n The name of the new prim.\n\n `position : Optional[List[int]]`\n The position of the new node in the canvas.\n\n `stage : Optional[int]`\n The stage it's necessary to add the new prim. If None, it takes\n the stage from the USD Context.\n\n `attributes_to_set: Optional[Dict[Sdf.Path, Any]]`\n Dict that has the list of attributes and values to set after the\n prim is imported.",
"snippet": "omni.kit.commands.execute(\"ImportCompoundCommand\",\n                          parent_path=parent_path,  # pxr.Sdf.Path\n                          source_asset=source_asset,  # str\n                          identifier=identifier,  # str\n                          position=None,  # typing.Union[typing.List[int], NoneType]\n                          stage=None,\n                          path=None,\n                          attributes_to_set=None)  # typing.Union[typing.Dict[pxr.Sdf.Path, typing.Any], NoneType]\n"
},
{
"title": "ImportLayerCommand",
"description": "[omni.kit.stage.copypaste.stage_copypaste_commands]\n\nImport given layer to the given stage under the specific root.\n\n### Arguments:\n\n `layer : Sdf.Layer`\n All the prims from this layer will be imported to the stage.\n\n `root : Sdf.Path`\n The new prims will be placed under this path.\n\n `stage : Optional[int]`\n The stage it's necessary to add the new prims. If None, it takes\n the stage from the USD Context.",
"snippet": "omni.kit.commands.execute(\"ImportLayerCommand\",\n                          layer=layer,  # pxr.Sdf.Layer\n                          root=Sdf.Path(\"/\"),  # pxr.Sdf.Path\n                          stage=None)  # typing.Union[pxr.Usd.Stage, NoneType]\n"
},
{
"title": "LinkSpecsCommand",
"description": "[omni.kit.usd.layers.impl.layer_commands]\n\nLinks spec paths to layers undoable.",
"snippet": "omni.kit.commands.execute(\"LinkSpecsCommand\",\n                          spec_paths=spec_paths,  # typing.Union[str, typing.List[str]]\n                          layer_identifiers=layer_identifiers,  # typing.Union[str, typing.List[str]]\n                          additive=True,  # bool\n                          hierarchy=False,  # bool\n                          usd_context=\"\")  # typing.Union[str, omni.usd._usd.UsdContext]\n"
},
{
"title": "LockLayer",
"description": "[omni.kit.usd.layers.impl.layer_commands]\n\nSet Layer's lock status undoable.",
"snippet": "omni.kit.commands.execute(\"LockLayer\",\n                          layer_identifier=layer_identifier,  # str\n                          locked=locked,  # bool\n                          usd_context=\"\")  # typing.Union[str, omni.usd._usd.UsdContext]\n"
},
{
"title": "LockSpecsCommand",
"description": "[omni.kit.usd.layers.impl.layer_commands]\n\nLocks spec paths undoable.",
"snippet": "omni.kit.commands.execute(\"LockSpecsCommand\",\n                          spec_paths=spec_paths,  # typing.Union[str, typing.List[str]]\n                          hierarchy=False,\n                          usd_context=\"\")  # typing.Union[str, omni.usd._usd.UsdContext]\n"
},
{
"title": "MergeLayersCommand",
"description": "[omni.kit.usd.layers.impl.layer_commands]\n\nMerge Layers undoable.",
"snippet": "omni.kit.commands.execute(\"MergeLayersCommand\",\n                          dst_parent_layer_identifier=dst_parent_layer_identifier,  # str\n                          dst_layer_identifier=dst_layer_identifier,\n                          src_parent_layer_identifier=src_parent_layer_identifier,  # str\n                          src_layer_identifier=src_layer_identifier,  # str\n                          dst_stronger_than_src=dst_stronger_than_src,  # bool\n                          usd_context=\"\")  # typing.Union[str, omni.usd._usd.UsdContext]\n"
},
{
"title": "ModifyLayerMetadataCommand",
"description": "[omni.kit.property.layer.commands]\n\nModify layer metadata undoable.",
"snippet": "omni.kit.commands.execute(\"ModifyLayerMetadataCommand\",\n                          layer_identifier=layer_identifier,\n                          parent_layer_identifier=parent_layer_identifier,\n                          meta_index=meta_index,\n                          value=value)\n"
},
{
"title": "ModifyStageAxisCommand",
"description": "[omni.kit.property.layer.commands]\n\nModify stage up axis undoable.",
"snippet": "omni.kit.commands.execute(\"ModifyStageAxisCommand\",\n                          stage=stage,\n                          axis=axis)\n"
},
{
"title": "MovePrimSpecsToLayerCommand",
"description": "[omni.kit.usd.layers.impl.layer_commands]\n\nMerge prim spec from src layer to dst layer and remove it from src layer.",
"snippet": "omni.kit.commands.execute(\"MovePrimSpecsToLayerCommand\",\n                          dst_layer_identifier=dst_layer_identifier,  # str\n                          src_layer_identifier=src_layer_identifier,  # str\n                          prim_spec_path=prim_spec_path,  # str\n                          dst_stronger_than_src=dst_stronger_than_src,  # bool\n                          usd_context=\"\")  # typing.Union[str, omni.usd._usd.UsdContext]\n"
},
{
"title": "MoveSublayerCommand",
"description": "[omni.kit.usd.layers.impl.layer_commands]\n\nMove Sublayer undoable.",
"snippet": "omni.kit.commands.execute(\"MoveSublayerCommand\",\n                          from_parent_layer_identifier=from_parent_layer_identifier,  # str\n                          from_sublayer_position=from_sublayer_position,  # int\n                          to_parent_layer_identifier=to_parent_layer_identifier,  # str\n                          to_sublayer_position=to_sublayer_position,  # int\n                          remove_source=False,  # bool\n                          usd_context=\"\")  # typing.Union[str, omni.usd._usd.UsdContext]\n"
},
{
"title": "NewUsdShadeMaterialCommand",
"description": "[omni.kit.window.material_graph.usdshade_commands]",
"snippet": "omni.kit.commands.execute(\"NewUsdShadeMaterialCommand\",\n                          parent_path=parent_path,  # pxr.Sdf.Path\n                          identifier=identifier,  # str\n                          position=None,  # typing.Union[typing.Tuple[int], NoneType]\n                          select_new_prim=False,  # bool\n                          stage=None,  # typing.Union[pxr.Usd.Stage, NoneType]\n                          context_name=None)  # typing.Union[str, NoneType]\n"
},
{
"title": "NewUsdShadeNodeCommand",
"description": "[omni.kit.window.material_graph.usdshade_commands]",
"snippet": "omni.kit.commands.execute(\"NewUsdShadeNodeCommand\",\n                          parent_path=parent_path,\n                          source_asset=source_asset,\n                          identifier=identifier,\n                          inputs=inputs,\n                          outputs=outputs,\n                          position=position,\n                          stage=None)\n"
},
{
"title": "NewUsdShadeNodeGraphCommand",
"description": "[omni.kit.window.material_graph.usdshade_commands]",
"snippet": "omni.kit.commands.execute(\"NewUsdShadeNodeGraphCommand\",\n                          parent_path=parent_path,\n                          identifier=identifier,\n                          position=position,\n                          stage=None)\n"
},
{
"title": "Redo",
"description": "[omni.kit.undo.undo]",
"snippet": "omni.kit.commands.execute(\"Redo\")\n"
},
{
"title": "RemoveItemFromCollection",
"description": "[omni.kit.widget.collection.commands]\n\nIf the item has been directly included in the collection, we can remove it from the includes list",
"snippet": "omni.kit.commands.execute(\"RemoveItemFromCollection\",\n                          prim_or_prop_path=prim_or_prop_path,  # str\n                          collection_path=collection_path)  # str\n"
},
{
"title": "RemovePrimSpecCommand",
"description": "[omni.kit.usd.layers.impl.layer_commands]\n\nRemove Prim undoable.",
"snippet": "omni.kit.commands.execute(\"RemovePrimSpecCommand\",\n                          layer_identifier=layer_identifier,  # str\n                          prim_spec_path=prim_spec_path,  # typing.Union[pxr.Sdf.Path, typing.List[pxr.Sdf.Path]]\n                          usd_context=\"\")  # typing.Union[str, omni.usd._usd.UsdContext]\n"
},
{
"title": "RemoveSublayerCommand",
"description": "[omni.kit.usd.layers.impl.layer_commands]\n\nRemove Sublayer undoable.",
"snippet": "omni.kit.commands.execute(\"RemoveSublayerCommand\",\n                          layer_identifier=layer_identifier,  # str\n                          sublayer_position=sublayer_position,  # int\n                          usd_context=\"\")  # typing.Union[str, omni.usd._usd.UsdContext]\n"
},
{
"title": "RemoveXformOpAndAttrbuteCommand",
"description": "[omni.kit.property.transform.scripts.transform_commands]\n\nRemove XformOp And Attribute.\n\nArgs:\n op_order_attr_path (str): path of the xformOpOrder attribute.\n op_name (str): name of the xformOp to be removed\nExample: \n We might want to remove xformOp:translate from the xformOpOrder token array\n But we still keep the xformOp:translate attribute itself",
"snippet": "omni.kit.commands.execute(\"RemoveXformOpAndAttrbuteCommand\",\n                          op_order_attr_path=op_order_attr_path,  # str\n                          op_name=op_name,  # str\n                          op_order_index=op_order_index)  # int\n"
},
{
"title": "RemoveXformOpCommand",
"description": "[omni.kit.property.transform.scripts.transform_commands]\n\nRemove XformOp Only.\n\nArgs:\n op_order_attr_path (str): path of the xformOpOrder attribute.\n op_name (str): name of the xformOp to be removed\nExample: \n We might want to remove xformOp:translate from the xformOpOrder token array\n But we still keep the xformOp:translate attribute itself",
"snippet": "omni.kit.commands.execute(\"RemoveXformOpCommand\",\n                          op_order_attr_path=op_order_attr_path,  # str\n                          op_name=op_name,  # str\n                          op_order_index=op_order_index)  # int\n"
},
{
"title": "RenameCollection",
"description": "[omni.kit.widget.collection.commands]\n\nRename a collection under the same prim",
"snippet": "omni.kit.commands.execute(\"RenameCollection\",\n                          old_collection_path=old_collection_path,  # str\n                          new_collection_name=new_collection_name)  # str\n"
},
{
"title": "ReplaceSublayerCommand",
"description": "[omni.kit.usd.layers.impl.layer_commands]\n\nReplace Layer undoable.",
"snippet": "omni.kit.commands.execute(\"ReplaceSublayerCommand\",\n                          layer_identifier=layer_identifier,  # str\n                          sublayer_position=sublayer_position,  # int\n                          new_layer_path=new_layer_path,  # str\n                          usd_context=\"\")  # typing.Union[str, omni.usd._usd.UsdContext]\n"
},
{
"title": "SelectAllCommand",
"description": "[omni.kit.selection.selection]\n\nSelect all prims.\n\nArgs:\n type (Union[str, None]): Specific type name. If it's None, it will select\n all prims. If it has type str with value \"\", it will select all prims without any type.\n Otherwise, it will select prims with that type.",
"snippet": "omni.kit.commands.execute(\"SelectAllCommand\",\n                          type=None)\n"
},
{
"title": "SelectFilterCommand",
"description": "[omni.kit.quicksearch.select.commands]",
"snippet": "omni.kit.commands.execute(\"SelectFilterCommand\",\n                          filter=filter,\n                          types=[])\n"
},
{
"title": "SelectHierarchyCommand",
"description": "[omni.kit.selection.selection]",
"snippet": "omni.kit.commands.execute(\"SelectHierarchyCommand\")\n"
},
{
"title": "SelectInvertCommand",
"description": "[omni.kit.selection.selection]",
"snippet": "omni.kit.commands.execute(\"SelectInvertCommand\")\n"
},
{
"title": "SelectLeafCommand",
"description": "[omni.kit.selection.selection]",
"snippet": "omni.kit.commands.execute(\"SelectLeafCommand\")\n"
},
{
"title": "SelectListCommand",
"description": "[omni.kit.selection.selection]",
"snippet": "omni.kit.commands.execute(\"SelectListCommand\")\n"
},
{
"title": "SelectNoneCommand",
"description": "[omni.kit.selection.selection]",
"snippet": "omni.kit.commands.execute(\"SelectNoneCommand\")\n"
},
{
"title": "SelectParentCommand",
"description": "[omni.kit.selection.selection]",
"snippet": "omni.kit.commands.execute(\"SelectParentCommand\")\n"
},
{
"title": "SelectPrimsInCollection",
"description": "[omni.kit.widget.collection.commands]",
"snippet": "omni.kit.commands.execute(\"SelectPrimsInCollection\",\n                          collection_path=\"\")  # str\n"
},
{
"title": "SelectSimilarCommand",
"description": "[omni.kit.selection.selection]",
"snippet": "omni.kit.commands.execute(\"SelectSimilarCommand\")\n"
},
{
"title": "SelectVariantPrimCommand",
"description": "[omni.kit.property.usd.variants_model]",
"snippet": "omni.kit.commands.execute(\"SelectVariantPrimCommand\",\n                          prim_path=prim_path,  # str\n                          vset_name=vset_name,  # str\n                          var_name=var_name,  # str\n                          usd_context_name=\"\")  # str\n"
},
{
"title": "SequencerClipCreateCommand",
"description": "[omni.kit.sequencer.core.scripts.sequencer_commands]\n\nCreate a clip on a track.",
"snippet": "omni.kit.commands.execute(\"SequencerClipCreateCommand\",\n                          track_path=track_path,  # str\n                          clip_name=\"\",  # str\n                          prim_path=\"\",  # str\n                          clip_start=0,  # float\n                          clip_end=None,  # float\n                          select_prim=False)\n"
},
{
"title": "SequencerClipDuplicateCommand",
"description": "[omni.kit.sequencer.core.scripts.sequencer_commands]\n\nCommand to duplicate a Sequence clip.",
"snippet": "omni.kit.commands.execute(\"SequencerClipDuplicateCommand\",\n                          clip_id=clip_id,  # str\n                          inherit_translation=False)  # bool\n"
},
{
"title": "SequencerClipSetAnimationCommand",
"description": "[omni.kit.sequencer.core.scripts.sequencer_commands]\n\nSet clip animation source to prim",
"snippet": "omni.kit.commands.execute(\"SequencerClipSetAnimationCommand\",\n                          clip_path=clip_path,  # pxr.Sdf.Path\n                          anim_prim_path=anim_prim_path,  # pxr.Sdf.Path\n                          update_clip_time=True)  # bool\n"
},
{
"title": "SequencerClipSetTargetCommand",
"description": "[omni.kit.sequencer.core.scripts.sequencer_commands]\n\nSet Clip target prim.",
"snippet": "omni.kit.commands.execute(\"SequencerClipSetTargetCommand\",\n                          clip_path=clip_path,  # pxr.Sdf.Path\n                          asset_prim_path=asset_prim_path,  # pxr.Sdf.Path\n                          update_time=False)  # bool\n"
},
{
"title": "SequencerClipSplitCommand",
"description": "[omni.kit.sequencer.core.scripts.sequencer_commands]\n\nCommand to split clips at specified time.",
"snippet": "omni.kit.commands.execute(\"SequencerClipSplitCommand\",\n                          clip_paths=clip_paths,  # typing.List[str]\n                          split_at_time=split_at_time)  # float\n"
},
{
"title": "SequencerClipUpdateTimeCommand",
"description": "[omni.kit.sequencer.core.scripts.sequencer_commands]\n\nCommmand to set clip start/end times.",
"snippet": "omni.kit.commands.execute(\"SequencerClipUpdateTimeCommand\",\n                          clip_id=clip_id,  # pxr.Sdf.Path\n                          clip_start=clip_start,  # float\n                          clip_end=clip_end,  # float\n                          old_clip_start=None,  # float\n                          old_clip_end=None)  # float\n"
},
{
"title": "SequencerClipUpdateTrimCommand",
"description": "[omni.kit.sequencer.core.scripts.sequencer_commands]\n\nCommand to set play start/end times.",
"snippet": "omni.kit.commands.execute(\"SequencerClipUpdateTrimCommand\",\n                          clip_id=clip_id,  # str\n                          play_start=play_start,  # float\n                          play_end=play_end,  # float\n                          old_play_start=None,  # float\n                          old_play_end=None)  # float\n"
},
{
"title": "SequencerCreatePrimCommandBase",
"description": "[omni.kit.sequencer.core.scripts.sequencer_commands]\n\nBase class to create a prim (and remove when undo)\nEnsures unique name, and handles selection.",
"snippet": "omni.kit.commands.execute(\"SequencerCreatePrimCommandBase\",\n                          path_to=path_to,  # pxr.Sdf.Path\n                          context_name=\"\",  # typing.Union[str, NoneType]\n                          prepend_default_prim=True)  # typing.Union[bool, NoneType]\n"
},
{
"title": "SequencerCreateReferenceCommand",
"description": "[omni.kit.sequencer.core.scripts.sequencer_commands]\n\nWraps the usd command for create reference - returns the referenced prim path.",
"snippet": "omni.kit.commands.execute(\"SequencerCreateReferenceCommand\",\n                          path_to=path_to,  # pxr.Sdf.Path\n                          asset_path=asset_path)  # str\n"
},
{
"title": "SequencerCreateSequenceCommand",
"description": "[omni.kit.sequencer.core.scripts.sequencer_commands]\n\nCreates a new Sequencer prim.\nReturns SequenceSchema.Sequence.",
"snippet": "omni.kit.commands.execute(\"SequencerCreateSequenceCommand\",\n                          path_to=Sdf.Path(\"/Sequence\"))  # typing.Union[pxr.Sdf.Path, NoneType]\n"
},
{
"title": "SequencerSetChildLocation",
"description": "[omni.kit.sequencer.core.scripts.sequencer_commands]\n\nSet prim child location.",
"snippet": "omni.kit.commands.execute(\"SequencerSetChildLocation\",\n                          parent_path=parent_path,  # str\n                          child_path=child_path,  # str\n                          to_location=-1,  # int\n                          from_location=None)  # int\n"
},
{
"title": "SequencerSetNameChildrenOrder",
"description": "[omni.kit.sequencer.core.scripts.sequencer_commands]\n\nSets the children order of a prim by name.",
"snippet": "omni.kit.commands.execute(\"SequencerSetNameChildrenOrder\",\n                          parent_path=parent_path,  # str\n                          children_order=children_order,  # typing.List[str]\n                          previous_order=None)  # typing.Union[typing.List[str], NoneType]\n"
},
{
"title": "SequencerSetRelationship",
"description": "[omni.kit.sequencer.core.scripts.sequencer_commands]",
"snippet": "omni.kit.commands.execute(\"SequencerSetRelationship\",\n                          relationship=relationship,  # pxr.Usd.Relationship\n                          target=target)  # pxr.Sdf.Path\n"
},
{
"title": "SequencerSetTargetCommand",
"description": "[omni.kit.sequencer.core.scripts.sequencer_commands]\n\nSet the prim target of a prim relationship.",
"snippet": "omni.kit.commands.execute(\"SequencerSetTargetCommand\",\n                          prim_path=prim_path,  # str\n                          target_prim=target_prim,  # str\n                          relationship_name=relationship_name)  # str\n"
},
{
"title": "SequencerSettingsSetSnapToFrameCommand",
"description": "[omni.kit.sequencer.core.scripts.sequencer_commands]\n\nCommand to set Snap to Frame option.\nArgs:\n on (bool, optional): Snap To Frame value. Defaults to True.",
"snippet": "omni.kit.commands.execute(\"SequencerSettingsSetSnapToFrameCommand\",\n                          on=True)\n"
},
{
"title": "SequencerTrackCreateCommand",
"description": "[omni.kit.sequencer.core.scripts.sequencer_commands]\n\nCreates a new Sequencer Track prim.\nReturns SequenceSchema.Track",
"snippet": "omni.kit.commands.execute(\"SequencerTrackCreateCommand\",\n                          sequence_path=sequence_path,  # pxr.Sdf.Path\n                          track_type=track_type,  # str\n                          track_name=\"\",  # typing.Union[str, NoneType]\n                          location=-1)  # int\n"
},
{
"title": "SequencerTrackMoveCommand",
"description": "[omni.kit.sequencer.core.scripts.sequencer_commands]\n\nMove track position in Sequencer up or down.",
"snippet": "omni.kit.commands.execute(\"SequencerTrackMoveCommand\",\n                          track_path=track_path,  # str\n                          move_vector=0)  # int\n"
},
{
"title": "SequencerTrackVisibleSetCommand",
"description": "[omni.kit.sequencer.core.scripts.sequencer_commands]\n\nSet visibility of a Track.",
"snippet": "omni.kit.commands.execute(\"SequencerTrackVisibleSetCommand\",\n                          track_path=None,  # pxr.Sdf.Path\n                          is_visible=True)\n"
},
{
"title": "SequencerUIStreamAudioCommand",
"description": "[omni.kit.sequencer.core.scripts.sequencer_audio_commands]\n\nCommand to record stage audio to file.",
"snippet": "omni.kit.commands.execute(\"SequencerUIStreamAudioCommand\",\n                          audio_path=audio_path)  # str\n"
},
{
"title": "SetActiveViewportCameraCommand",
"description": "[omni.kit.viewport_legacy.scripts.commands]\n\nSets Viewport's actively bound camera to given camera at give path.\n\nArgs:\n new_active_cam_path (Union[str, Sdf.Path): new camera path to bind to viewport.\n viewport_name (str): name of the viewport to set active camera (for multi-viewport).",
"snippet": "omni.kit.commands.execute(\"SetActiveViewportCameraCommand\",\n                          new_active_cam_path=new_active_cam_path,  # typing.Union[str, pxr.Sdf.Path]\n                          viewport_name=\"\")  # str\n"
},
{
"title": "SetCollectionExpansionRule",
"description": "[omni.kit.widget.collection.commands]",
"snippet": "omni.kit.commands.execute(\"SetCollectionExpansionRule\",\n                          collection_path=collection_path,  # str\n                          expansion_rule=expansion_rule)  # str\n"
},
{
"title": "SetEditTargetCommand",
"description": "[omni.kit.usd.layers.impl.layer_commands]\n\nSelect Layer as Edit Target undoable.",
"snippet": "omni.kit.commands.execute(\"SetEditTargetCommand\",\n                          layer_identifier=layer_identifier,  # str\n                          usd_context=\"\")  # typing.Union[str, omni.usd._usd.UsdContext]\n"
},
{
"title": "SetLayerMutenessCommand",
"description": "[omni.kit.usd.layers.impl.layer_commands]\n\nSet Layer's muteness undoable.",
"snippet": "omni.kit.commands.execute(\"SetLayerMutenessCommand\",\n                          layer_identifier=layer_identifier,  # str\n                          muted=muted,  # bool\n                          usd_context=\"\")  # typing.Union[str, omni.usd._usd.UsdContext]\n"
},
{
"title": "SetViewportCameraCommand",
"description": "[omni.kit.viewport.menubar.camera.commands]\n\nSets a Viewport's actively bound camera to camera at given path\n\nArgs:\n camera_path (Union[str, Sdf.Path): New camera path to bind to viewport.\n viewport_api: the viewport to target.",
"snippet": "omni.kit.commands.execute(\"SetViewportCameraCommand\",\n                          camera_path=camera_path,  # typing.Union[str, pxr.Sdf.Path]\n                          viewport_api=viewport_api)\n"
},
{
"title": "StitchPrimSpecsToLayer",
"description": "[omni.kit.usd.layers.impl.layer_commands]\n\nFlatten specific prims in the stage.\n\nIt will remove original prim specs after flatten.",
"snippet": "omni.kit.commands.execute(\"StitchPrimSpecsToLayer\",\n                          prim_paths=prim_paths,  # typing.List[str]\n                          target_layer_identifier=target_layer_identifier,  # str\n                          usd_context=\"\")  # typing.Union[str, omni.usd._usd.UsdContext]\n"
},
{
"title": "ToggleExtension",
"description": "[omni.kit.window.extensions.ext_commands]\n\nToggle extension. Enables/disables an extension.\n\nArgs:\n ext_id(str): Extension id.\n enable(bool): Enable or disable.",
"snippet": "omni.kit.commands.execute(\"ToggleExtension\",\n                          ext_id=ext_id,  # str\n                          enable=enable)  # bool\n"
},
{
"title": "ToolbarPauseButtonClickedCommand",
"description": "[omni.kit.window.toolbar.commands]\n\nOn clicked toolbar pause button.",
"snippet": "omni.kit.commands.execute(\"ToolbarPauseButtonClickedCommand\")\n"
},
{
"title": "ToolbarPlayButtonClickedCommand",
"description": "[omni.kit.window.toolbar.commands]\n\nOn clicked toolbar play button.",
"snippet": "omni.kit.commands.execute(\"ToolbarPlayButtonClickedCommand\")\n"
},
{
"title": "ToolbarPlayFilterCheckedCommand",
"description": "[omni.kit.window.toolbar.commands]\n\nChange settings depending on the status of play filter checkboxes.\n\nArgs:\n path: Path to the setting to change.\n enabled: New value to change to.",
"snippet": "omni.kit.commands.execute(\"ToolbarPlayFilterCheckedCommand\",\n                          setting_path=setting_path,\n                          enabled=enabled)\n"
},
{
"title": "ToolbarPlayFilterSelectAllCommand",
"description": "[omni.kit.window.toolbar.commands]\n\nSets all play filter settings to True.\n\nArgs:\n settings: Paths to the settings.",
"snippet": "omni.kit.commands.execute(\"ToolbarPlayFilterSelectAllCommand\",\n                          settings=settings)\n"
},
{
"title": "ToolbarStopButtonClickedCommand",
"description": "[omni.kit.window.toolbar.commands]\n\nOn clicked toolbar stop button.",
"snippet": "omni.kit.commands.execute(\"ToolbarStopButtonClickedCommand\")\n"
},
{
"title": "TransformJointCommand",
"description": "[omni.kit.property.physx.commands]",
"snippet": "omni.kit.commands.execute(\"TransformJointCommand\",\n                          joint_path=joint_path,  # str\n                          new_transform=new_transform,  # pxr.Gf.Matrix4d\n                          orig_transform=orig_transform)  # pxr.Gf.Matrix4d\n"
},
{
"title": "Undo",
"description": "[omni.kit.undo.undo]",
"snippet": "omni.kit.commands.execute(\"Undo\")\n"
},
{
"title": "UnlinkSpecsCommand",
"description": "[omni.kit.usd.layers.impl.layer_commands]\n\nUnlinks spec paths to layers undoable.",
"snippet": "omni.kit.commands.execute(\"UnlinkSpecsCommand\",\n                          spec_paths=spec_paths,  # typing.Union[str, typing.List[str]]\n                          layer_identifiers=layer_identifiers,  # typing.Union[str, typing.List[str]]\n                          hierarchy=False,\n                          usd_context=\"\")  # typing.Union[str, omni.usd._usd.UsdContext]\n"
},
{
"title": "UnlockSpecsCommand",
"description": "[omni.kit.usd.layers.impl.layer_commands]\n\nUnlocks spec paths undoable.",
"snippet": "omni.kit.commands.execute(\"UnlockSpecsCommand\",\n                          spec_paths=spec_paths,  # typing.Union[str, typing.List[str]]\n                          hierarchy=False,\n                          usd_context=\"\")  # typing.Union[str, omni.usd._usd.UsdContext]\n"
},
{
"title": "UsdShadeDisconnectSourceCommand",
"description": "[omni.kit.window.material_graph.usdshade_commands]\n\nUndoable UsdShade.Input.DisconnectSource",
"snippet": "omni.kit.commands.execute(\"UsdShadeDisconnectSourceCommand\",\n                          target=target)  # pxr.UsdShade.Input\n"
},
{
"title": "UsdUINodeGraphNodeSetCommand",
"description": "[omni.kit.graph.usd.commands.commands]\n\nSet prim UsdUI position\n\nArgs:\n prim_path (str): Prim path.\n value: Value to change to.\n prev: Value to undo to.",
"snippet": "omni.kit.commands.execute(\"UsdUINodeGraphNodeSetCommand\",\n                          attribute=attribute,  # str\n                          prim_path=prim_path,  # pxr.Sdf.Path\n                          value=value,\n                          prev=prev,\n                          stage=None)  # pxr.Usd.Stage\n"
},
{
"title": "UsdUIRemovePositionCommand",
"description": "[omni.kit.graph.usd.commands.commands]\n\nRemove position attribute.\n\nArgs:\n prim_path (str): Prim path.",
"snippet": "omni.kit.commands.execute(\"UsdUIRemovePositionCommand\",\n                          prim_path=prim_path,  # pxr.Sdf.Path\n                          stage=None)  # pxr.Usd.Stage\n"
}
]
},
{
"title": "omni.paint",
"snippets": [
{
"title": "ChangeBrushParamCommand",
"description": "[omni.paint.system.ui.paint_tool.commands]",
"snippet": "omni.kit.commands.execute(\"ChangeBrushParamCommand\",\n                          brush=brush,\n                          param=param,\n                          value=value,\n                          prev_value=prev_value)\n"
},
{
"title": "DoPaintEraseCommand",
"description": "[omni.paint.system.core.painter.commands]",
"snippet": "omni.kit.commands.execute(\"DoPaintEraseCommand\",\n                          position=position)\n"
},
{
"title": "DoPaintFloodCommand",
"description": "[omni.paint.system.core.painter.commands]",
"snippet": "omni.kit.commands.execute(\"DoPaintFloodCommand\",\n                          flood_mode=flood_mode)  # str\n"
},
{
"title": "DoPaintStampCommand",
"description": "[omni.paint.system.core.painter.commands]",
"snippet": "omni.kit.commands.execute(\"DoPaintStampCommand\",\n                          position=position,\n                          radius=radius,\n                          target_meshes=target_meshes)\n"
},
{
"title": "ModifyPointInstancerAttrCommand",
"description": "[omni.paint.brush.modify.brush.command]",
"snippet": "omni.kit.commands.execute(\"ModifyPointInstancerAttrCommand\",\n                          prim=prim,\n                          attr_name=attr_name,\n                          values=values)\n"
},
{
"title": "ModifyPointInstancerVisibleCommand",
"description": "[omni.paint.brush.modify.brush.command]",
"snippet": "omni.kit.commands.execute(\"ModifyPointInstancerVisibleCommand\",\n                          prim=prim,\n                          values=values)\n"
},
{
"title": "ScatterBrushEraseCommand",
"description": "[omni.paint.brush.scatter.extension]",
"snippet": "omni.kit.commands.execute(\"ScatterBrushEraseCommand\",\n                          erasers=erasers)\n"
},
{
"title": "ScatterBrushPaintCommand",
"description": "[omni.paint.brush.scatter.extension]",
"snippet": "omni.kit.commands.execute(\"ScatterBrushPaintCommand\",\n                          instancing_type=instancing_type,\n                          paint_candicator=paint_candicator,\n                          out_paint_asset_prims=out_paint_asset_prims)\n"
},
{
"title": "SetPaintBrushCommand",
"description": "[omni.paint.system.core.painter.commands]",
"snippet": "omni.kit.commands.execute(\"SetPaintBrushCommand\",\n                          brush_name=brush_name)  # str\n"
}
]
},
{
"title": "omni.particle",
"snippets": [
{
"title": "CreateParticleSystemEntityCommand",
"description": "[omni.particle.system.core.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"CreateParticleSystemEntityCommand\",\n                          callback=callback)  # typing.Callable[[], typing.List[str]]\n"
}
]
},
{
"title": "omni.physxcamera",
"snippets": [
{
"title": "PhysXAddDroneCameraCommand",
"description": "[omni.physxcamera.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"PhysXAddDroneCameraCommand\",\n                          subjectPrimPath=subjectPrimPath,\n                          cameraPrimPath=cameraPrimPath)\n"
},
{
"title": "PhysXAddFollowLookCameraCommand",
"description": "[omni.physxcamera.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"PhysXAddFollowLookCameraCommand\",\n                          subjectPrimPath=subjectPrimPath,\n                          cameraPrimPath=cameraPrimPath)\n"
},
{
"title": "PhysXAddFollowVelocityCameraCommand",
"description": "[omni.physxcamera.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"PhysXAddFollowVelocityCameraCommand\",\n                          subjectPrimPath=subjectPrimPath,\n                          cameraPrimPath=cameraPrimPath)\n"
},
{
"title": "PhysXUpdateAllCamerasCommand",
"description": "[omni.physxcamera.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"PhysXUpdateAllCamerasCommand\",\n                          enabled=enabled)\n"
}
]
},
{
"title": "omni.physxcommands",
"snippets": [
{
"title": "AddCollisionGroupCommand",
"description": "[omni.physxcommands]\n\nWrapper for omni.physx.utils.addCollisionGroup. Creates a UsdPhysics.CollisionGroup prim.\n\nArgs:\n stage: USD stage.\n path: Path of the primitive to be created at. ",
"snippet": "omni.kit.commands.execute(\"AddCollisionGroupCommand\",\n                          stage=stage,\n                          path=path)\n"
},
{
"title": "AddD6PhysicsJointComponentCommand",
"description": "[omni.physxcommands]",
"snippet": "omni.kit.commands.execute(\"AddD6PhysicsJointComponentCommand\",\n                          usd_prim=usd_prim,  # pxr.Usd.Prim\n                          component=component)  # str\n"
},
{
"title": "AddDeformableBodyComponentCommand",
"description": "[omni.physxcommands]\n\n Adds a deformable body component to a skin UsdGeom.Mesh using an optional set of TetrahedralMesh paths to define collision and simulation meshes.\n\n Parameters:\n skin_mesh_path: Path to UsdGeom.Mesh to which PhysxDeformableBodyAPI is applied and that will be driven by the\n simulation.\n\n collision_mesh_path: *Optional* path to collision PhysxSchema.TetrahedralMesh. If not provided, it is\n created from the mesh at skin_mesh_path.\n\n simulation_mesh_path: *Optional* path to simulation PhysxSchema.TetrahedralMesh. If not provided, it is\n created from the collision TetrahedralMesh. The simulation mesh path may be identical to\n the collision mesh path.\n\n voxel_resolution: Resolution along longest axis-aligned-bounding-box axis to create simulation\n TetrahedralMesh from voxelizing collision TetrahedralMesh.\n\n collision_simplification: Boolean flag indicating if simplification should be applied to the mesh before creating a\n softbody out of it.\n\n collision_simplification_remeshing: Boolean flag indicating if the simplification should be based on remeshing.\n Ignored if collision_simplification equals False.\n\n collision_simplification_remeshing_resolution: The resolution used for remeshing. A value of 0 indicates that a heuristic is used to determine\n the resolution. Ignored if collision_simplification_remeshing is False.\n\n collision_simplification_target_triangle_count: The target triangle count used for the simplification. A value of 0 indicates\n that a heuristic based on the simulation_hexahedral_resolution is to determine the target count.\n Ignored if collision_simplification equals False.\n\n collision_simplification_force_conforming: Boolean flag indicating that the tretrahedralizer used to generate the collision mesh should produce\n tetrahedra that conform to the triangle mesh. If False the implementation chooses the tretrahedralizer\n used. \n\n ...: Optional USD schema attributes, please refer to USD schema documentation.\n Returns:\n True / False that indicates success of command execution",
"snippet": "omni.kit.commands.execute(\"AddDeformableBodyComponentCommand\",\n                          skin_mesh_path=skin_mesh_path,  # pxr.Sdf.Path\n                          collision_mesh_path=Sdf.Path.emptyPath,  # pxr.Sdf.Path\n                          simulation_mesh_path=Sdf.Path.emptyPath,  # pxr.Sdf.Path\n                          voxel_resolution=10,  # int\n                          collision_simplification=True,  # bool\n                          collision_simplification_remeshing=True,  # bool\n                          collision_simplification_remeshing_resolution=0,  # int\n                          collision_simplification_target_triangle_count=0,  # int\n                          collision_simplification_force_conforming=False,  # bool\n                          solver_position_iteration_count=None,  # int\n                          vertex_velocity_damping=None,  # float\n                          sleep_damping=None,  # float\n                          sleep_threshold=None,  # float\n                          settling_threshold=None,  # float\n                          self_collision=None,  # bool\n                          self_collision_filter_distance=None)  # float\n"
},
{
"title": "AddDeformableBodyMaterialCommand",
"description": "[omni.physxcommands]\n\nWrapper for omni.physx.deformableUtils.add_deformable_body_material.\nCreates a UsdShade.Material prim if needed and adds a PhysxSchema.PhysxDeformableBodyMaterialAPI to it.\n\nArgs:\n stage: USD stage.\n path: Path of the primitive to be created at. \n dampingScale: Physics material param.\n density: Physics material param.\n dynamicFriction: Physics material param.\n elasticityDamping: Physics material param.\n poissonsRatio: Physics material param.\n youngsModulus: Physics material param.",
"snippet": "omni.kit.commands.execute(\"AddDeformableBodyMaterialCommand\",\n                          stage=stage,\n                          path=path,\n                          dampingScale=None,\n                          density=None,\n                          dynamicFriction=None,\n                          elasticityDamping=None,\n                          poissonsRatio=None,\n                          youngsModulus=None)\n"
},
{
"title": "AddDiffuseParticlesCommand",
"description": "[omni.physxcommands]\n\nWrapper for omni.physx.utils.add_physx_diffuse_particles. Adds a\nPhysxSchema.PhysxDiffuseParticlesAPI to a particle system.\n\nAPI params, see schema doc\n stage\n path\n enabled\n max_diffuse_particles\n threshold\n lifetime\n air_drag\n bubble_drag\n buoyancy\n kinetic_energy_weight\n pressure_weight\n divergence_weight\n collision_decay\n use_accurate_velocity",
"snippet": "omni.kit.commands.execute(\"AddDiffuseParticlesCommand\",\n                          stage=stage,\n                          path=path,\n                          enabled=None,\n                          max_diffuse_particles=None,\n                          threshold=None,\n                          lifetime=None,\n                          air_drag=None,\n                          bubble_drag=None,\n                          buoyancy=None,\n                          kinetic_energy_weight=None,\n                          pressure_weight=None,\n                          divergence_weight=None,\n                          collision_decay=None,\n                          use_accurate_velocity=None)\n"
},
{
"title": "AddDistancePhysicsJointComponentCommand",
"description": "[omni.physxcommands]",
"snippet": "omni.kit.commands.execute(\"AddDistancePhysicsJointComponentCommand\",\n                          usd_prim=usd_prim,  # pxr.Usd.Prim\n                          component=component)  # str\n"
},
{
"title": "AddFixedPhysicsJointComponentCommand",
"description": "[omni.physxcommands]",
"snippet": "omni.kit.commands.execute(\"AddFixedPhysicsJointComponentCommand\",\n                          usd_prim=usd_prim,  # pxr.Usd.Prim\n                          component=component)  # str\n"
},
{
"title": "AddGroundPlaneCommand",
"description": "[omni.physxcommands]\n\nWrapper for omni.physx.physicsUtils.add_ground_plane. Adds a zero-thick plane to prevent physics-enabled prims from falling to infinity. Creates an UsdGeom.Xform with a UsdGeom.Mesh and a PhysxSchema.Plane child primitives.\n\nArgs:\n stage: USD stage.\n planePath: Path for the root xform to be created at. Finds first free path.\n axis: Up axis.\n size: Halfsize of one side.\n position: Center of the plane.\n color: Display color.\n\nReturns:\n Path where the plane was actually created.",
"snippet": "omni.kit.commands.execute(\"AddGroundPlaneCommand\",\n                          stage=stage,\n                          planePath=planePath,\n                          axis=axis,\n                          size=size,\n                          position=position,\n                          color=color)\n"
},
{
"title": "AddPBDMaterialCommand",
"description": "[omni.physxcommands]\n\nWrapper for omni.physx.particleUtils.add_pbd_particle_material. Adds a PhysxSchema.PhysxPBDMaterialAPI to a\nUsdShade.Material prim, and creates the material prim if needed.\n\nArgs:\n stage: USD stage.\n path: Path of the material to add the API to / or create a material if needed\n\n Material params, see schema API doc\n friction\n particle_friction_scale\n damping\n viscosity\n vorticity_confinement\n surface_tension\n cohesion\n adhesion\n particle_adhesion_scale\n adhesion_offset_scale\n gravity_scale\n lift\n drag\n density\n cfl_coefficient",
"snippet": "omni.kit.commands.execute(\"AddPBDMaterialCommand\",\n                          stage=stage,\n                          path=path,\n                          friction=None,\n                          particle_friction_scale=None,\n                          damping=None,\n                          viscosity=None,\n                          vorticity_confinement=None,\n                          surface_tension=None,\n                          cohesion=None,\n                          adhesion=None,\n                          particle_adhesion_scale=None,\n                          adhesion_offset_scale=None,\n                          gravity_scale=None,\n                          lift=None,\n                          drag=None,\n                          density=None,\n                          cfl_coefficient=None)\n"
},
{
"title": "AddPairFilterCommand",
"description": "[omni.physxcommands]\n\nWrapper for omni.physx.utils.addPairFilter. Filters out collisions between primitives using UsdPhysics.FilteredPairsAPI.\n\nArgs:\n stage: USD stage.\n primPaths: List of paths. ",
"snippet": "omni.kit.commands.execute(\"AddPairFilterCommand\",\n                          stage=stage,\n                          primPaths=primPaths)\n"
},
{
"title": "AddParticleAnisotropyCommand",
"description": "[omni.physxcommands]\n\nWrapper for omni.physx.utils.add_physx_particle_anisotropy. Adds a\nPhysxSchema.PhysxParticleAnisotropyAPI to a particle system.\n\nArgs:\n stage: USD stage.\n path: Path of the primitive to be created at.\n\n API params, see schema doc\n enabled\n scale\n min\n max",
"snippet": "omni.kit.commands.execute(\"AddParticleAnisotropyCommand\",\n                          stage=stage,\n                          path=path,\n                          enabled=None,\n                          scale=None,\n                          min=None,\n                          max=None)\n"
},
{
"title": "AddParticleClothComponentCommand",
"description": "[omni.physxcommands]",
"snippet": "omni.kit.commands.execute(\"AddParticleClothComponentCommand\",\n                          prim_path=prim_path)\n"
},
{
"title": "AddParticleIsosurfaceCommand",
"description": "[omni.physxcommands]\n\nWrapper for omni.physx.utils.add_physx_particle_isosurface. Adds a\nPhysxSchema.PhysxParticleIsosurfaceAPI to a particle system.\n\nArgs:\n stage: USD stage.\n path: Path of the primitive to be created at.\n\n API params, see schema doc\n enabled\n max_vertices\n max_triangles\n max_subgrids\n grid_spacing\n surface_distance\n grid_filtering_passes\n grid_smoothing_radius\n enable_anisotropy\n anisotropy_min\n anisotropy_max\n anisotropy_radius\n num_mesh_smoothing_passes\n num_mesh_normal_smoothing_passes\n",
"snippet": "omni.kit.commands.execute(\"AddParticleIsosurfaceCommand\",\n                          stage=stage,\n                          path=path,\n                          enabled=None,\n                          max_vertices=None,\n                          max_triangles=None,\n                          max_subgrids=None,\n                          grid_spacing=None,\n                          surface_distance=None,\n                          grid_filtering_passes=None,\n                          grid_smoothing_radius=None,\n                          num_mesh_smoothing_passes=None,\n                          num_mesh_normal_smoothing_passes=None)\n"
},
{
"title": "AddParticleSamplingCommand",
"description": "[omni.physxcommands]\n\nAdds the particle sampling API to a mesh and generate a particle prim\n\nArgs:\n prim: the USD prim this command is executed on",
"snippet": "omni.kit.commands.execute(\"AddParticleSamplingCommand\",\n                          prim=prim)\n"
},
{
"title": "AddParticleSetCommand",
"description": "[omni.physxcommands]\n\nAdds the PhysxParticleSetAPI to UsdGeomPointBased\n\nArgs:\n prim: the USD prim this command is executed on",
"snippet": "omni.kit.commands.execute(\"AddParticleSetCommand\",\n                          prim=prim)\n"
},
{
"title": "AddParticleSmoothingCommand",
"description": "[omni.physxcommands]\n\nWrapper for omni.physx.utils.add_physx_particle_smoothing. Adds a\nPhysxSchema.PhysxParticleSmoothingAPI to a particle system.\n\nArgs:\n stage: USD stage.\n path: Path of the primitive to be created at.\n\n API params, see schema doc\n enabled\n strength",
"snippet": "omni.kit.commands.execute(\"AddParticleSmoothingCommand\",\n                          stage=stage,\n                          path=path,\n                          enabled=None,\n                          strength=None)\n"
},
{
"title": "AddParticleSystemCommand",
"description": "[omni.physxcommands]\n\nWrapper for omni.physx.utils.add_physx_particle_system. Adds a\nPhysxSchema.PhysxParticleSystem.\n\nArgs:\n stage: USD stage\n target_particle_system_path: Path of the primitive to be created at.\n\n API params, see schema doc:\n\n enabled\n simulation_owner\n contact_offset\n particle_contact_offset\n solid_rest_offset\n fluid_rest_offset\n enable_ccd\n solver_position_iterations\n max_depenetration_velocity\n wind\n max_neighborhood\n max_velocity\n global_self_collision_enabled\n non_particle_collision_enabled",
"snippet": "omni.kit.commands.execute(\"AddParticleSystemCommand\",\n                          target_particle_system_path=None,  # pxr.Sdf.Path\n                          enabled=None,  # bool\n                          simulation_owner=None,  # pxr.Sdf.Path\n                          contact_offset=None,  # float\n                          rest_offset=None,  # float\n                          particle_contact_offset=None,  # float\n                          solid_rest_offset=None,  # float\n                          fluid_rest_offset=None,  # float\n                          enable_ccd=None,  # bool\n                          solver_position_iteration_count=None,  # int\n                          max_depenetration_velocity=None,  # float\n                          wind=None,  # pxr.Gf.Vec3f\n                          max_neighborhood=None,  # int\n                          max_velocity=None,  # float\n                          global_self_collision_enabled=None,  # bool\n                          non_particle_collision_enabled=None)  # bool\n"
},
{
"title": "AddPhysicsComponentCommand",
"description": "[omni.physxcommands]\n\nAdd physics component command. See omni.physx.commands source for currently valid component names.\n\nArgs:\n usd_prim: USD prim to apply a component to.\n str: Component name.\n multiple_api_token: Component instance name (if applicable).",
"snippet": "omni.kit.commands.execute(\"AddPhysicsComponentCommand\",\n                          usd_prim=usd_prim,  # pxr.Usd.Prim\n                          component=component,  # str\n                          multiple_api_token=None)  # str\n"
},
{
"title": "AddPhysicsSceneCommand",
"description": "[omni.physxcommands]\n\nWrapper for omni.physx.utils.addPhysicsScene. Adds a UsdPhysics.Scene prim with default params.\n\nArgs:\n stage: USD stage.\n path: Path of the primitive to be created at. ",
"snippet": "omni.kit.commands.execute(\"AddPhysicsSceneCommand\",\n                          stage=stage,\n                          path=path)\n"
},
{
"title": "AddPrismaticPhysicsJointComponentCommand",
"description": "[omni.physxcommands]",
"snippet": "omni.kit.commands.execute(\"AddPrismaticPhysicsJointComponentCommand\",\n                          usd_prim=usd_prim,  # pxr.Usd.Prim\n                          component=component)  # str\n"
},
{
"title": "AddRevolutePhysicsJointComponentCommand",
"description": "[omni.physxcommands]",
"snippet": "omni.kit.commands.execute(\"AddRevolutePhysicsJointComponentCommand\",\n                          usd_prim=usd_prim,  # pxr.Usd.Prim\n                          component=component)  # str\n"
},
{
"title": "AddRigidBodyMaterialCommand",
"description": "[omni.physxcommands]\n\nWrapper for omni.physx.utils.addRigidBodyMaterial. Creates a UsdShade.Material prim if needed and adds a UsdPhysics.MaterialAPI to it.\n\nArgs:\n stage: USD stage.\n path: Path of the primitive to be created at. \n density: Physics material param.\n staticFriction: Physics material param.\n dynamicFriction: Physics material param.\n restitution: Physics material param.",
"snippet": "omni.kit.commands.execute(\"AddRigidBodyMaterialCommand\",\n                          stage=stage,\n                          path=path,\n                          density=None,\n                          staticFriction=None,\n                          dynamicFriction=None,\n                          restitution=None)\n"
},
{
"title": "AddSphericalPhysicsJointComponentCommand",
"description": "[omni.physxcommands]",
"snippet": "omni.kit.commands.execute(\"AddSphericalPhysicsJointComponentCommand\",\n                          usd_prim=usd_prim,  # pxr.Usd.Prim\n                          component=component)  # str\n"
},
{
"title": "ApplyAPISchemaCommand",
"description": "[omni.physxcommands]\n\nUndoable Apply API command.\n\nArgs:\n api: API class.\n prim: Target primitive.\n api_prefix: Prefix of a multiple-apply API.\n multiple_api_token: Token of a multiple-apply API.",
"snippet": "omni.kit.commands.execute(\"ApplyAPISchemaCommand\",\n                          api=api,\n                          prim=prim,\n                          api_prefix=None,\n                          multiple_api_token=None)\n"
},
{
"title": "ChangeAttributeCommand",
"description": "[omni.physxcommands]\n\nChange prim property undoable.\n\nArgs:\n attr (attribute): Attribute to change.\n value: Value to change to.\n value: Value to undo to.",
"snippet": "omni.kit.commands.execute(\"ChangeAttributeCommand\",\n                          attr=attr,  # pxr.Usd.Attribute\n                          widget=widget,  # typing.Any\n                          value=value,  # typing.Any\n                          prev=prev)  # typing.Any\n"
},
{
"title": "CreateJointCommand",
"description": "[omni.physxcommands]\n\nWrapper for omni.physx.utils.createJoint. Connects two primitives with a physical joints.\n\nArgs:\n stage: Path of the target primitive.\n joint_type: Fixed, Revolute, Prismatic, Spherical or Distance. If left blank a D6 Joint is used.\n from_prim: From primitive.\n to_prim: To primitive.\n\nReturns: \n Joint primitive.",
"snippet": "omni.kit.commands.execute(\"CreateJointCommand\",\n                          stage=stage,\n                          joint_type=joint_type,\n                          from_prim=from_prim,\n                          to_prim=to_prim)\n"
},
{
"title": "CreateJointsCommand",
"description": "[omni.physxcommands]\n\nWrapper for omni.physx.utils.createJoints. Connects a list of primitives with their parent or a pseudo-root with physical joints.\n\nArgs:\n stage: Path of the target primitive.\n joint_type: Fixed, Revolute, Prismatic, Spherical or Distance. If left blank a D6 Joint is used.\n paths: A list of paths.\n join_to_parent: Connect primitives to their parents if True, otherwise to a scene pseudo-root.\n\nReturns: \n Joint primitives.",
"snippet": "omni.kit.commands.execute(\"CreateJointsCommand\",\n                          stage=stage,\n                          joint_type=joint_type,\n                          paths=paths,\n                          join_to_parent=False)\n"
},
{
"title": "CreatePhysicsAttachmentCommand",
"description": "[omni.physxcommands]",
"snippet": "omni.kit.commands.execute(\"CreatePhysicsAttachmentCommand\",\n                          target_attachment_path=target_attachment_path,  # pxr.Sdf.Path\n                          actor0_path=actor0_path,  # pxr.Sdf.Path\n                          actor1_path=actor1_path)  # pxr.Sdf.Path\n"
},
{
"title": "ImportTetrahedralMeshCommand",
"description": "[omni.physxcommands]\n\n Creates a PhysxSchema.TetrahedralMesh from a TetMesh file. Must provide either path_without_extension\n as a non-empty string or a node_str + tet_str [ + face_str (optional)]\n\n Parameters:\n target_tet_mesh_path: Target path for new PhysxSchema.TetrahedralMesh.\n target_surface_mesh_path: Target path for the associated surface mesh (can be None)\n path_without_extension: Base file path to import (should not have file extension),\n use an empty string to ignore\n node_str: pass a string for the node file contents directly (optional)\n tet_str: pass a string for the tetrahedral mesh file contents directly (optional)\n face_str: pass a string for the surface mesh file contents directly (optional)\n suppress_errors: primarily for running tests, when testing conditions that are supposed to fail\n Returns:\n True / False that indicates success of command execution.\n",
"snippet": "omni.kit.commands.execute(\"ImportTetrahedralMeshCommand\",\n                          target_tet_mesh_path=target_tet_mesh_path,  # pxr.Sdf.Path\n                          target_surface_mesh_path=None,  # typing.Union[pxr.Sdf.Path, NoneType]\n                          path_without_extension=\"\",  # str\n                          node_str=\"\",  # str\n                          tet_str=\"\",  # str\n                          face_str=\"\",  # str\n                          suppress_errors=False)  # bool\n"
},
{
"title": "PhysicsCommand",
"description": "[omni.physxcommands]\n\nBase class for physics commands. Adds an execute helper to not force the user to use only keyword arguments",
"snippet": "omni.kit.commands.execute(\"PhysicsCommand\")\n"
},
{
"title": "RemoveAttributeCommand",
"description": "[omni.physxcommands]",
"snippet": "omni.kit.commands.execute(\"RemoveAttributeCommand\",\n                          attribute=attribute,\n                          prim=prim)\n"
},
{
"title": "RemoveD6PhysicsJointComponentCommand",
"description": "[omni.physxcommands]",
"snippet": "omni.kit.commands.execute(\"RemoveD6PhysicsJointComponentCommand\",\n                          usd_prim=usd_prim,  # pxr.Usd.Prim\n                          component=component)  # str\n"
},
{
"title": "RemoveDeformableBodyComponentCommand",
"description": "[omni.physxcommands]",
"snippet": "omni.kit.commands.execute(\"RemoveDeformableBodyComponentCommand\",\n                          prim_path=prim_path)\n"
},
{
"title": "RemoveDistancePhysicsJointComponentCommand",
"description": "[omni.physxcommands]",
"snippet": "omni.kit.commands.execute(\"RemoveDistancePhysicsJointComponentCommand\",\n                          usd_prim=usd_prim,  # pxr.Usd.Prim\n                          component=component)  # str\n"
},
{
"title": "RemoveFixedPhysicsJointComponentCommand",
"description": "[omni.physxcommands]",
"snippet": "omni.kit.commands.execute(\"RemoveFixedPhysicsJointComponentCommand\",\n                          usd_prim=usd_prim,  # pxr.Usd.Prim\n                          component=component)  # str\n"
},
{
"title": "RemovePairFilterCommand",
"description": "[omni.physxcommands]\n\nWrapper for omni.physx.utils.removePairFilter. Removes UsdPhysics.FilteredPairsAPI from primitives.\n\nArgs:\n stage: USD stage.\n primPaths: List of paths. ",
"snippet": "omni.kit.commands.execute(\"RemovePairFilterCommand\",\n                          stage=stage,\n                          primPaths=primPaths)\n"
},
{
"title": "RemoveParticleClothComponentCommand",
"description": "[omni.physxcommands]",
"snippet": "omni.kit.commands.execute(\"RemoveParticleClothComponentCommand\",\n                          prim_path=prim_path)  # pxr.Sdf.Path\n"
},
{
"title": "RemoveParticleSamplingCommand",
"description": "[omni.physxcommands]\n\nRemoves particle sampling API from a mesh.\nWill not remove the particle prim that was generated using the sampler.\n\nArgs:\n stage: the stage with the particles\n prim: the USD prim this command is executed on",
"snippet": "omni.kit.commands.execute(\"RemoveParticleSamplingCommand\",\n                          stage=stage,\n                          prim=prim)\n"
},
{
"title": "RemoveParticleSetCommand",
"description": "[omni.physxcommands]\n\nRemoves the PhysxParticleSetAPI\n\nArgs:\n stage: the USD stage containing the particles\n prim: the USD prim with the API",
"snippet": "omni.kit.commands.execute(\"RemoveParticleSetCommand\",\n                          stage=stage,\n                          prim=prim)\n"
},
{
"title": "RemovePhysicsComponentCommand",
"description": "[omni.physxcommands]\n\nRemove physics component. See omni.physx.commands source for currently valid components.\n\nArgs:\n usd_prim: USD prim to apply a component to.\n str: Component name.\n multiple_api_token: Component instance name (if applicable).",
"snippet": "omni.kit.commands.execute(\"RemovePhysicsComponentCommand\",\n                          usd_prim=usd_prim,  # pxr.Usd.Prim\n                          component=component,  # str\n                          multiple_api_token=None)  # str\n"
},
{
"title": "RemovePrismaticPhysicsJointComponentCommand",
"description": "[omni.physxcommands]",
"snippet": "omni.kit.commands.execute(\"RemovePrismaticPhysicsJointComponentCommand\",\n                          usd_prim=usd_prim,  # pxr.Usd.Prim\n                          component=component)  # str\n"
},
{
"title": "RemoveRelationshipCommand",
"description": "[omni.physxcommands]",
"snippet": "omni.kit.commands.execute(\"RemoveRelationshipCommand\",\n                          relationship=relationship,\n                          prim=prim)\n"
},
{
"title": "RemoveRevolutePhysicsJointComponentCommand",
"description": "[omni.physxcommands]",
"snippet": "omni.kit.commands.execute(\"RemoveRevolutePhysicsJointComponentCommand\",\n                          usd_prim=usd_prim,  # pxr.Usd.Prim\n                          component=component)  # str\n"
},
{
"title": "RemoveRigidBodyCommand",
"description": "[omni.physxcommands]\n\nWrapper for omni.physx.utils.removeRigidBody.\n\nArgs:\n path: Path of the target primitive.",
"snippet": "omni.kit.commands.execute(\"RemoveRigidBodyCommand\",\n                          path=path)\n"
},
{
"title": "RemoveSpatialTendonAttachmentAPICommand",
"description": "[omni.physxcommands]",
"snippet": "omni.kit.commands.execute(\"RemoveSpatialTendonAttachmentAPICommand\",\n                          attachment_path=attachment_path,  # str\n                          attachment_api=attachment_api)  # str\n"
},
{
"title": "RemoveSphericalPhysicsJointComponentCommand",
"description": "[omni.physxcommands]",
"snippet": "omni.kit.commands.execute(\"RemoveSphericalPhysicsJointComponentCommand\",\n                          usd_prim=usd_prim,  # pxr.Usd.Prim\n                          component=component)  # str\n"
},
{
"title": "RemoveStaticColliderCommand",
"description": "[omni.physxcommands]\n\nWrapper for omni.physx.utils.removeStaticCollider.\n\nArgs:\n path: Path of the target primitive.",
"snippet": "omni.kit.commands.execute(\"RemoveStaticColliderCommand\",\n                          path=path)\n"
},
{
"title": "RemoveTendonComponentsCommand",
"description": "[omni.physxcommands]",
"snippet": "omni.kit.commands.execute(\"RemoveTendonComponentsCommand\",\n                          usd_prim=usd_prim,  # pxr.Usd.Prim\n                          component=component)  # str\n"
},
{
"title": "SetCustomMetadataCommand",
"description": "[omni.physxcommands]",
"snippet": "omni.kit.commands.execute(\"SetCustomMetadataCommand\",\n                          stage=stage,\n                          metadata_name=metadata_name,\n                          new_values=new_values,\n                          old_values=old_values)\n"
},
{
"title": "SetRigidBodyCommand",
"description": "[omni.physxcommands]\n\nWrapper for omni.physx.utils.setRigidBody. Applies UsdPhysics.RigidBodyAPI and a UsdPhysics.CollisionAPI to target prim. Applies UsdPhysics.MeshCollisionAPI if it's a mesh. Collision API's are also applied to the whole subtree if the target prim is an xform.\n\nArgs:\n path: Path of the target primitive.\n approximationShape: Physics param.\n kinematic: Physics param.",
"snippet": "omni.kit.commands.execute(\"SetRigidBodyCommand\",\n                          path=path,\n                          approximationShape=\"convexHull\",\n                          kinematic=False)\n"
},
{
"title": "SetSpatialTendonAttachmentParentCommand",
"description": "[omni.physxcommands]",
"snippet": "omni.kit.commands.execute(\"SetSpatialTendonAttachmentParentCommand\",\n                          child_attachment_path=child_attachment_path,  # str\n                          parent_attachment_path=parent_attachment_path)  # str\n"
},
{
"title": "SetStaticColliderCommand",
"description": "[omni.physxcommands]\n\nWrapper for omni.physx.utils.setStaticCollider. Applies Collision APIs (UsdPhysics.CollisionAPI, UsdPhysics.MeshCollisionAPI) to a target prim and its subtree.\n\nArgs:\n path: Path of the target primitive.\n approximationShape: Physics param.",
"snippet": "omni.kit.commands.execute(\"SetStaticColliderCommand\",\n                          path=path,\n                          approximationShape=\"none\")\n"
},
{
"title": "UnapplyAPISchemaCommand",
"description": "[omni.physxcommands]\n\nUndoable Unapply API command.\n\nArgs:\n api: API class.\n prim: Target primitive.\n api_prefix: Prefix of a multiple-apply API.\n multiple_api_token: Token of a multiple-apply API.",
"snippet": "omni.kit.commands.execute(\"UnapplyAPISchemaCommand\",\n                          api=api,\n                          prim=prim,\n                          api_prefix=None,\n                          multiple_api_token=None)\n"
}
]
},
{
"title": "omni.physxvehicle",
"snippets": [
{
"title": "PhysXVehicleControllerEnableAutoReverseCommand",
"description": "[omni.physxvehicle.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"PhysXVehicleControllerEnableAutoReverseCommand\",\n                          primPath=primPath,\n                          enabled=enabled)\n"
},
{
"title": "PhysXVehicleControllerEnableInputCommand",
"description": "[omni.physxvehicle.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"PhysXVehicleControllerEnableInputCommand\",\n                          primPath=primPath,\n                          enabled=enabled)\n"
},
{
"title": "PhysXVehicleControllerEnableMouseCommand",
"description": "[omni.physxvehicle.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"PhysXVehicleControllerEnableMouseCommand\",\n                          primPath=primPath,\n                          enabled=enabled)\n"
},
{
"title": "PhysXVehicleSetRelationshipCommand",
"description": "[omni.physxvehicle.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"PhysXVehicleSetRelationshipCommand\",\n                          relationshipPath=relationshipPath,\n                          targetPath=targetPath)\n"
},
{
"title": "PhysXVehicleTireFrictionTableAddCommand",
"description": "[omni.physxvehicle.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"PhysXVehicleTireFrictionTableAddCommand\",\n                          setPrimAsSelected=True)  # bool\n"
},
{
"title": "PhysXVehicleTireFrictionTableAddEntryCommand",
"description": "[omni.physxvehicle.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"PhysXVehicleTireFrictionTableAddEntryCommand\",\n                          tireFrictionTablePath=tireFrictionTablePath,\n                          materialPath=materialPath,\n                          frictionValue=frictionValue)\n"
},
{
"title": "PhysXVehicleTireFrictionTableChangeEntryCommand",
"description": "[omni.physxvehicle.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"PhysXVehicleTireFrictionTableChangeEntryCommand\",\n                          tireFrictionTablePath=tireFrictionTablePath,\n                          entryIndex=entryIndex,\n                          frictionValue=frictionValue,\n                          oldFrictionValue=None)\n"
},
{
"title": "PhysXVehicleTireFrictionTableRemoveEntryCommand",
"description": "[omni.physxvehicle.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"PhysXVehicleTireFrictionTableRemoveEntryCommand\",\n                          tireFrictionTablePath=tireFrictionTablePath,\n                          entryIndex=entryIndex)\n"
},
{
"title": "PhysXVehicleWheelSimTransformsAutocomputeCommand",
"description": "[omni.physxvehicle.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"PhysXVehicleWheelSimTransformsAutocomputeCommand\",\n                          primPath=primPath)\n"
},
{
"title": "PhysXVehicleWizardCreateCommand",
"description": "[omni.physxvehicle.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"PhysXVehicleWizardCreateCommand\",\n                          vehicleData=vehicleData)\n"
}
]
},
{
"title": "omni.physxzerogravity",
"snippets": [
{
"title": "PlacementModeTransformCommand",
"description": "[omni.physxzerogravity.scripts.placement_mode]",
"snippet": "omni.kit.commands.execute(\"PlacementModeTransformCommand\",\n                          physx_authoring=physx_authoring,\n                          capture_session_id=capture_session_id)\n"
},
{
"title": "ZeroGravityClearAllCommand",
"description": "[omni.physxzerogravity.scripts.extension]",
"snippet": "omni.kit.commands.execute(\"ZeroGravityClearAllCommand\")\n"
},
{
"title": "ZeroGravityClearSelectedCommand",
"description": "[omni.physxzerogravity.scripts.extension]",
"snippet": "omni.kit.commands.execute(\"ZeroGravityClearSelectedCommand\")\n"
},
{
"title": "ZeroGravitySetDroppingCommand",
"description": "[omni.physxzerogravity.scripts.extension]",
"snippet": "omni.kit.commands.execute(\"ZeroGravitySetDroppingCommand\",\n                          dropping=dropping)\n"
},
{
"title": "ZeroGravitySetEnabledCommand",
"description": "[omni.physxzerogravity.scripts.extension]",
"snippet": "omni.kit.commands.execute(\"ZeroGravitySetEnabledCommand\",\n                          enabled=enabled)\n"
},
{
"title": "ZeroGravitySetSelectedDynamicCommand",
"description": "[omni.physxzerogravity.scripts.extension]",
"snippet": "omni.kit.commands.execute(\"ZeroGravitySetSelectedDynamicCommand\")\n"
},
{
"title": "ZeroGravitySetSelectedStaticCommand",
"description": "[omni.physxzerogravity.scripts.extension]",
"snippet": "omni.kit.commands.execute(\"ZeroGravitySetSelectedStaticCommand\")\n"
}
]
},
{
"title": "omni.ramp",
"snippets": [
{
"title": "SetRampValuesCommand",
"description": "[omni.ramp.scripts.commands]",
"snippet": "omni.kit.commands.execute(\"SetRampValuesCommand\",\n                          prim_path=None,\n                          pos_attr_name=None,\n                          val_attr_name=None,\n                          int_attr_name=None,\n                          old_positions=None,\n                          old_values=None,\n                          old_interps=None,\n                          new_positions=None,\n                          new_values=None,\n                          new_interps=None)\n"
}
]
},
{
"title": "omni.rtx",
"snippets": [
{
"title": "RestoreDefaultRenderSettingCommand",
"description": "[omni.rtx.window.settings.commands]\n\nRestore default setting for Renderer.\n\nArgs:\n path: Path to the setting to be reset.",
"snippet": "omni.kit.commands.execute(\"RestoreDefaultRenderSettingCommand\",\n                          path=path)  # str\n"
},
{
"title": "RestoreDefaultRenderSettingSectionCommand",
"description": "[omni.rtx.window.settings.commands]\n\nRestore default settings for the whole section.\n\nArgs:\n path: Path to the settings section to be reset.",
"snippet": "omni.kit.commands.execute(\"RestoreDefaultRenderSettingSectionCommand\",\n                          path=path)  # str\n"
},
{
"title": "SetCurrentRenderer",
"description": "[omni.rtx.window.settings.commands]\n\nSets the current renderer\nArgs:\n renderer_name: name of the renderer",
"snippet": "omni.kit.commands.execute(\"SetCurrentRenderer\",\n                          renderer_name=renderer_name)  # str\n"
},
{
"title": "SetCurrentStack",
"description": "[omni.rtx.window.settings.commands]\n\nSets the current stack (needs to be one which is valid for the current renderer) \nArgs:\n stack_name: name of the stack",
"snippet": "omni.kit.commands.execute(\"SetCurrentStack\",\n                          stack_name=stack_name)  # str\n"
}
]
},
{
"title": "omni.tools",
"snippets": [
{
"title": "AddValidTranslateOpCommand",
"description": "[omni.tools.pivot.pivot_tool_commands]\n\nPivot Tool - internal command",
"snippet": "omni.kit.commands.execute(\"AddValidTranslateOpCommand\",\n                          prim_path=prim_path,  # str\n                          context=\"\")  # str\n"
},
{
"title": "ApplyArrayCommand",
"description": "[omni.tools.array.extension]\n\nUsed by the Array Tool UI to 'Apply' the array - undoable/redoable.\n\nShould NOT be used outside of the Array Tool extension.\n\nOptional Args:\n usd_context_name (str): The USD context where this command should be used - allows for this command to be used by multiple USD contexts simultaneously.",
"snippet": "omni.kit.commands.execute(\"ApplyArrayCommand\",\n                          usd_context_name=\"\")  # str\n"
},
{
"title": "ApplyRandomizerCommand",
"description": "[omni.tools.randomizer.extension]\n\nUsed by the Randomizer Tool UI to 'Apply' the randomizer - undoable/redoable.\n\nShould NOT be used outside of the Randomizer Tool extension.\n\nOptional Args:\n usd_context_name (str): The USD context where this command should be used - allows for this command to be used by multiple USD contexts simultaneously.",
"snippet": "omni.kit.commands.execute(\"ApplyRandomizerCommand\",\n                          usd_context_name=\"\")  # str\n"
},
{
"title": "CopyPrimSelectCommand",
"description": "[omni.tools.array.array_core]",
"snippet": "omni.kit.commands.execute(\"CopyPrimSelectCommand\",\n                          path_from=path_from,  # str\n                          path_to=None,  # str\n                          duplicate_layers=False,  # bool\n                          combine_layers=False,  # bool\n                          exclusive_select=True,  # bool\n                          usd_context_name=\"\",  # str\n                          flatten_references=False,  # bool\n                          copy_to_introducing_layer=False)  # bool\n"
},
{
"title": "CreateArrayCommand",
"description": "[omni.tools.array.extension]\n\nCreates an Array of prims - undoable/redoable.\n\nCan be used outside of the Array Tool extension.\n\nRequired Args:\n target_prims (list): The list of prims to array. Expects prims, not prim paths.\n array_values (dict): The values to use to construct the array. Expects a dictionary matching the one seen in ArrayParams().\n\nOptional Args:\n usd_context_name (str): The USD context where this command should be used - allows for this command to be used by multiple USD contexts simultaneously.\n\nReturns:\n Do() (tuple): (Created prim paths: list, Grouped prims path: list, Seleced prims path: list)",
"snippet": "omni.kit.commands.execute(\"CreateArrayCommand\",\n                          target_prims=target_prims,  # typing.List[pxr.Usd.Prim]\n                          array_values=array_values,  # dict\n                          usd_context_name=\"\")  # str\n"
},
{
"title": "CreateInstanceSelectCommand",
"description": "[omni.tools.array.array_core]",
"snippet": "omni.kit.commands.execute(\"CreateInstanceSelectCommand\",\n                          path_from=path_from)  # str\n"
},
{
"title": "FixTransformOpOrderWithPivotCommand",
"description": "[omni.tools.pivot.pivot_tool_commands]\n\nPivot Tool - internal command",
"snippet": "omni.kit.commands.execute(\"FixTransformOpOrderWithPivotCommand\",\n                          prim_path=prim_path,  # str\n                          prev_xform_order=prev_xform_order,  # list\n                          context=\"\")  # str\n"
},
{
"title": "GroupPrimsSelectCommand",
"description": "[omni.tools.array.array_core]",
"snippet": "omni.kit.commands.execute(\"GroupPrimsSelectCommand\",\n                          prim_paths=prim_paths,  # typing.List[typing.Union[str, pxr.Sdf.Path]]\n                          stage=None,  # typing.Union[pxr.Usd.Stage, NoneType]\n                          context_name=None,  # typing.Union[str, NoneType]\n                          destructive=True)\n"
},
{
"title": "PivotToolAddPivotCommand",
"description": "[omni.tools.pivot.pivot_tool_commands]\n\nPivot Tool: Add Pivot to supported Xformable Prims. Prims need to have a valid full XformOp stack..\n\nArgs:\n prim_paths (List[str]): Prim paths of Prims to add PivotOp to.\n\n context (str): Optional context",
"snippet": "omni.kit.commands.execute(\"PivotToolAddPivotCommand\",\n                          prim_paths=prim_paths,\n                          context=\"\")\n"
},
{
"title": "PivotToolRemovePivotCommand",
"description": "[omni.tools.pivot.pivot_tool_commands]\n\nPivot Tool: Remove Pivot from supported Xformable Prims. Prims need to have a valid full XformOp stack..\n\nArgs:\n prim_paths (List[str]): Prim paths of Prims to add PivotOp to.\n\n maintain_position (bool): Modify TranslateOp to avoid drift.\n\n bbox_includes_child_prims (bool): Bounding box is extended to include Xformable child Prims.\n\n context (str): Optional context",
"snippet": "omni.kit.commands.execute(\"PivotToolRemovePivotCommand\",\n                          prim_paths=prim_paths,  # list\n                          maintain_position=True,  # bool\n                          bbox_includes_child_prims=True,  # bool\n                          context=\"\")  # str\n"
},
{
"title": "PivotToolResetPivotCommand",
"description": "[omni.tools.pivot.pivot_tool_commands]\n\nPivot Tool: Zero out the Pivot position on Xformable Prims with PivotOp.\nPrims need to have a valid full XformOp stack..\n\nArgs:\n prim_paths (List[str]): Prim paths of Prims to update PivotOp on.\n\n maintain_position (bool): Modify TranslateOp to avoid drift.\n\n bbox_includes_child_prims (bool): Bounding box is extended to include Xformable child Prims.\n\n auto_enable_pivots (bool): Automatically enable any disabled PivotOps.\n\n context (str): Optional context",
"snippet": "omni.kit.commands.execute(\"PivotToolResetPivotCommand\",\n                          prim_paths=prim_paths,  # list\n                          maintain_position=True,  # bool\n                          bbox_includes_child_prims=True,  # bool\n                          auto_enable_pivots=True,  # bool\n                          context=\"\")  # str\n"
},
{
"title": "PivotToolSetPivotFromPrimWorldPositionCommand",
"description": "[omni.tools.pivot.pivot_tool_commands]\n\nPivot Tool: Set Pivot position on Xformable Prims with PivotOp from an arbitrary Prim's World Position.\nPrims need to have a valid full XformOp stack..\n\nArgs:\n prim_paths (List[str]): Prim paths of Prims to update PivotOp on.\n\n world_position_prim_path (str): Prim whose world position to apply to each PivotOp.\n\n maintain_position (bool): Modify TranslateOp to avoid drift.\n\n bbox_includes_child_prims (bool): Bounding box is extended to include Xformable child Prims.\n\n auto_enable_pivots (bool): Automatically enable any disabled PivotOps.\n\n context (str): Optional context",
"snippet": "omni.kit.commands.execute(\"PivotToolSetPivotFromPrimWorldPositionCommand\",\n                          prim_paths=prim_paths,  # list\n                          world_position_prim_path=world_position_prim_path,  # str\n                          maintain_position=True,  # bool\n                          bbox_includes_child_prims=True,  # bool\n                          auto_enable_pivots=True,  # bool\n                          context=\"\")  # str\n"
},
{
"title": "PivotToolSetPivotFromWorldPositionCommand",
"description": "[omni.tools.pivot.pivot_tool_commands]\n\nPivot Tool: Set Pivot position on Xformable Prims with PivotOp from an arbitrary World Position.\nPrims need to have a valid full XformOp stack..\n\nArgs:\n prim_paths (List[str]): Prim paths of Prims to update PivotOp on.\n\n world_position (Gf.Vec3d): World position to apply to each PivotOp.\n\n maintain_position (bool): Modify TranslateOp to avoid drift.\n\n bbox_includes_child_prims (bool): Bounding box is extended to include Xformable child Prims.\n\n auto_enable_pivots (bool): Automatically enable any disabled PivotOps.\n\n context (str): Optional context",
"snippet": "omni.kit.commands.execute(\"PivotToolSetPivotFromWorldPositionCommand\",\n                          prim_paths=prim_paths,  # list\n                          world_position=world_position,  # pxr.Gf.Vec3d\n                          maintain_position=True,  # bool\n                          bbox_includes_child_prims=True,  # bool\n                          auto_enable_pivots=True,  # bool\n                          context=\"\")  # str\n"
},
{
"title": "PivotToolSetPivotToBoundingBoxBaseCommand",
"description": "[omni.tools.pivot.pivot_tool_commands]\n\nPivot Tool: Set Pivot position on Xformable Prims with PivotOp to the\nbottom center of their respective bounding boxes.\nPrims need to have a valid full XformOp stack..\n\nArgs:\n prim_paths (List[str]): Prim paths of Prims to update PivotOp on.\n\n maintain_position (bool): Modify TranslateOp to avoid drift.\n\n bbox_includes_child_prims (bool): Bounding box is extended to include Xformable child Prims.\n\n auto_enable_pivots (bool): Automatically enable any disabled PivotOps.\n\n context (str): Optional context",
"snippet": "omni.kit.commands.execute(\"PivotToolSetPivotToBoundingBoxBaseCommand\",\n                          prim_paths=prim_paths,  # list\n                          maintain_position=True,  # bool\n                          bbox_includes_child_prims=True,  # bool\n                          auto_enable_pivots=True,  # bool\n                          context=\"\")  # str\n"
},
{
"title": "PivotToolSetPivotToBoundingBoxCenterCommand",
"description": "[omni.tools.pivot.pivot_tool_commands]\n\nPivot Tool: Set Pivot position on Xformable Prims with PivotOp to the center of their respective bounding boxes.\nPrims need to have a valid full XformOp stack..\n\nArgs:\n prim_paths (List[str]): Prim paths of Prims to update PivotOp on.\n\n maintain_position (bool): Modify TranslateOp to avoid drift.\n\n bbox_includes_child_prims (bool): Bounding box is extended to include Xformable child Prims.\n\n auto_enable_pivots (bool): Automatically enable any disabled PivotOps.\n\n context (str): Optional context",
"snippet": "omni.kit.commands.execute(\"PivotToolSetPivotToBoundingBoxCenterCommand\",\n                          prim_paths=prim_paths,  # list\n                          maintain_position=True,  # bool\n                          bbox_includes_child_prims=True,  # bool\n                          auto_enable_pivots=True,  # bool\n                          context=\"\")  # str\n"
},
{
"title": "PivotToolUpdatePivotCommand",
"description": "[omni.tools.pivot.pivot_tool_commands]\n\nPivot Tool: Update Pivot on Xformable Prims with PivotOp.\nPrims need to have a valid full XformOp stack..\n\nArgs:\n prim_paths (List[str]): Prim paths of Prims to update PivotOp on.\n\n new_pivot_position (Gf.Vec3d): New Pivot position to set all Pivots to.\n\n use_normalized_position (bool): Position values are normalized and relative to each Prim's bounding box.\n\n maintain_position (bool): Modify TranslateOp to avoid drift.\n\n bbox_includes_child_prims (bool): Bounding box is extended to include Xformable child Prims.\n\n auto_enable_pivots (bool): Automatically enable any disabled PivotOps.\n\n context (str): Optional context",
"snippet": "omni.kit.commands.execute(\"PivotToolUpdatePivotCommand\",\n                          prim_paths=prim_paths,  # list\n                          new_pivot_position=new_pivot_position,  # pxr.Gf.Vec3d\n                          use_normalized_position=True,  # bool\n                          maintain_position=True,  # bool\n                          bbox_includes_child_prims=True,  # bool\n                          auto_enable_pivots=True,  # bool\n                          context=\"\")  # str\n"
},
{
"title": "RandomizeSelectionCommand",
"description": "[omni.tools.randomizer.extension]\n\nRandomly select a percentage of the provided prims - undoable/redoable.\n\nCan be used outside of the Randomizer Tool extension.\n\nRequired Args:\n target_prim_paths (list): The list of prim paths to operate on\n percent_to_select (int): A percent of the original provided prims to randomly select, between 0 and 100.\n\nOptional Args:\n seed (int): The random seed to use for this operation. If none is given one will be generated.\n usd_context_name (str): The USD context where this command should be used - allows for this command to be used by multiple USD contexts simultaneously.",
"snippet": "omni.kit.commands.execute(\"RandomizeSelectionCommand\",\n                          target_prim_paths=target_prim_paths,  # typing.List[str]\n                          percent_to_select=percent_to_select,  # int\n                          seed=None,  # int\n                          usd_context_name=\"\")  # str\n"
},
{
"title": "RandomizeTransformsCommand",
"description": "[omni.tools.randomizer.extension]\n\nRandomize transformations on provided prims - undoable/redoable.\n\nCan be used outside of the Randomizer Tool extension.\n\nRequired Args:\n target_prims (list): The list of prims to operate on\n\nOptional Args:\n translate_ranges (tuple(Gf.Vec2d, Gf.Vec2d, Gf.Vec2d)): Min and Max value range for X,Y,Z axes\n rotate_ranges (tuple(Gf.Vec2d, Gf.Vec2d, Gf.Vec2d)): Min and Max value range for X,Y,Z axes\n scale_ranges (tuple(Gf.Vec2d, Gf.Vec2d, Gf.Vec2d)): Min and Max value range for X,Y,Z axes\n seed (int): The random seed to use for this operation. If none is given one will be generated.\n uniform_scaling (bool): If True, the provided scale ranges will be set to the same min and max values, and scaling applied to the selected prims will be uniform on a per-prim basis.\n usd_context_name (str): The USD context where this command should be used - allows for this command to be used by multiple USD contexts simultaneously.",
"snippet": "omni.kit.commands.execute(\"RandomizeTransformsCommand\",\n                          target_prims=target_prims,  # typing.List[pxr.Usd.Prim]\n                          translate_ranges=(Gf.Vec2d(0.0, 0.0), Gf.Vec2d(0.0, 0.0), Gf.Vec2d(0.0, 0.0)),  # tuple\n                          rotate_ranges=(Gf.Vec2d(0.0, 0.0), Gf.Vec2d(0.0, 0.0), Gf.Vec2d(0.0, 0.0)),  # tuple\n                          scale_ranges=(Gf.Vec2d(0.0, 0.0), Gf.Vec2d(0.0, 0.0), Gf.Vec2d(0.0, 0.0)),  # tuple\n                          seed=None,  # int\n                          uniform_scaling=False,  # bool\n                          usd_context_name=\"\")  # str\n"
},
{
"title": "RefreshPropertyPanelCommand",
"description": "[omni.tools.pivot.pivot_tool_commands]\n\nPivot Tool - internal command",
"snippet": "omni.kit.commands.execute(\"RefreshPropertyPanelCommand\")\n"
},
{
"title": "RemovePivotFromTransformOpOrderCommand",
"description": "[omni.tools.pivot.pivot_tool_commands]\n\nPivot Tool - internal command",
"snippet": "omni.kit.commands.execute(\"RemovePivotFromTransformOpOrderCommand\",\n                          prim_path=prim_path,  # str\n                          prev_xform_order=prev_xform_order,  # list\n                          context=\"\")  # str\n"
},
{
"title": "RemovePivotWithMaintainPositionCommand",
"description": "[omni.tools.pivot.pivot_tool_commands]\n\nPivot Tool - internal command",
"snippet": "omni.kit.commands.execute(\"RemovePivotWithMaintainPositionCommand\",\n                          prim_paths=typing.List[str],\n                          context=\"\")  # str\n"
}
]
},
{
"title": "omni.usd",
"snippets": [
{
"title": "AddPayloadCommand",
"description": "[omni.usd.commands.usd_commands]",
"snippet": "omni.kit.commands.execute(\"AddPayloadCommand\",\n                          stage=stage,\n                          prim_path=prim_path,  # pxr.Sdf.Path\n                          payload=payload,  # pxr.Sdf.Payload\n                          position=Usd.ListPositionBackOfPrependList)\n"
},
{
"title": "AddReferenceCommand",
"description": "[omni.usd.commands.usd_commands]",
"snippet": "omni.kit.commands.execute(\"AddReferenceCommand\",\n                          stage=stage,\n                          prim_path=prim_path,  # pxr.Sdf.Path\n                          reference=reference,  # pxr.Sdf.Reference\n                          position=Usd.ListPositionBackOfPrependList)\n"
},
{
"title": "AddRelationshipTargetCommand",
"description": "[omni.usd.commands.usd_commands]\n\nAdd target to a relationship",
"snippet": "omni.kit.commands.execute(\"AddRelationshipTargetCommand\",\n                          relationship=relationship,  # pxr.Usd.Relationship\n                          target=target,  # pxr.Sdf.Path\n                          position=Usd.ListPositionBackOfPrependList)\n"
},
{
"title": "BindMaterialCommand",
"description": "[omni.usd.commands.usd_commands]\n\nBind material undoable.\n\nArgs:\n prim_path (str or list): Path(s) to prim or collection\n material_path (str): Path to material to bind.\n strength (float): Strength.",
"snippet": "omni.kit.commands.execute(\"BindMaterialCommand\",\n                          prim_path=prim_path,  # typing.Union[str, list]\n                          material_path=material_path,  # str\n                          strength=None)\n"
},
{
"title": "ChangeAttributesColorSpaceCommand",
"description": "[omni.usd.commands.usd_commands]\n\nChange attribute color space undoable.\n\nArgs:\n attributes (List[str]): attributes to set color space on.\n color_space: Value of metadata to change to.",
"snippet": "omni.kit.commands.execute(\"ChangeAttributesColorSpaceCommand\",\n                          attributes=attributes,  # typing.List[pxr.Usd.Attribute]\n                          color_space=color_space)  # typing.Any\n"
},
{
"title": "ChangeMetadataCommand",
"description": "[omni.usd.commands.usd_commands]\n\nChange object metadata undoable.\n\nArgs:\n object_paths (List[str]): Object paths, can be attribute or prim.\n key: Key of metadata to change.\n value: Value of metadata to change to.",
"snippet": "omni.kit.commands.execute(\"ChangeMetadataCommand\",\n                          object_paths=object_paths,  # typing.List[str]\n                          key=key,  # typing.Any\n                          value=value)  # typing.Any\n"
},
{
"title": "ChangeMetadataInPrimsCommand",
"description": "[omni.usd.commands.usd_commands]\n\nChange prim metadata undoable.\n\nArgs:\n prim_paths (List[str]): Prim paths.\n key: Key of metadata to change.\n value: Value of metadata to change to.",
"snippet": "omni.kit.commands.execute(\"ChangeMetadataInPrimsCommand\",\n                          prim_paths=prim_paths,  # typing.List[str]\n                          key=key,  # typing.Any\n                          value=value)  # typing.Any\n"
},
{
"title": "ChangePropertyCommand",
"description": "[omni.usd.commands.usd_commands]\n\nChange prim property undoable.\n\nArgs:\n prop_path (str): Prim property path.\n value (Any): Value to change to.\n prev (Any): Value to undo to.\n timecode (Usd.TimeCode): The timecode to set property value to.\n type_to_create_if_not_exist (Sdf.ValueTypeName): If not None AND property does not already exist, a new property will be created with given type and value.\n target_layer (sdf.Layer): Target layer to write value to. Leave to None to use current stage's EditTarget.\n usd_context_name (str): Name of the usd context to work on. Leave to \"\" to use default USD context.\n is_custom (bool): If the property is created, specifiy if it is a 'custom' property (not part of the Schema).\n variability (Sdf.Variability): If the property is created, specify the variability.",
"snippet": "omni.kit.commands.execute(\"ChangePropertyCommand\",\n                          prop_path=prop_path,  # str\n                          value=value,  # typing.Any\n                          prev=prev,  # typing.Any\n                          timecode=DEFAULT,\n                          type_to_create_if_not_exist=None,  # pxr.Sdf.ValueTypeNames\n                          target_layer=None,  # pxr.Sdf.Layer\n                          usd_context_name=\"\",  # str\n                          is_custom=False,  # bool\n                          variability=Sdf.VariabilityVarying)  # pxr.Sdf.Variability\n"
},
{
"title": "ClearRefinementOverridesCommand",
"description": "[omni.usd.commands.usd_commands]\n\nClear Refinement Overrides .\n",
"snippet": "omni.kit.commands.execute(\"ClearRefinementOverridesCommand\")\n"
},
{
"title": "CopyPrimCommand",
"description": "[omni.usd.commands.usd_commands]\n\nCopy primitive undoable.\n\nArgs:\n path_from (str): Path to copy from.\n\n path_to (str): Path to copy to. If `None` next free path is generated.\n\n duplicate_layers (bool): Duplicate layers on copy.\n\n combine_layers (bool): Combine layers on copy. When it's in omni.usd.LayerEditMode.AUTO_AUTHORING mode, this will always be true.\n\n exclusive_select (bool): If to exclusively select (clear old selections) the newly create object.\n\n flatten_references (bool): Flatten references during copy. It's only valid when combine_layers is True, and not in AUTO_AUTHORING mode.\n\n copy_to_introducing_layer (bool): If to copy it to the introducing layer, or the current edit target. By default, it's current edit target.",
"snippet": "omni.kit.commands.execute(\"CopyPrimCommand\",\n                          path_from=path_from,  # str\n                          path_to=None,  # str\n                          duplicate_layers=False,  # bool\n                          combine_layers=False,  # bool\n                          exclusive_select=True,  # bool\n                          usd_context_name=\"\",  # str\n                          flatten_references=False,  # bool\n                          copy_to_introducing_layer=False)  # bool\n"
},
{
"title": "CopyPrimsCommand",
"description": "[omni.usd.commands.usd_commands]\n\nCopy multiple primitives undoable.\n\nArgs:\n paths_from List[str]: Paths to copy from.\n\n paths_to List[str]: Paths to copy to. If `None` or length smaller than paths_from, then next free path is generated for missing paths.\n\n duplicate_layers (bool): Duplicate layers on copy.\n\n combine_layers (bool): Combine layers on copy.\n\n flatten_references (bool): Flatten references during copy. It's only valid when combine_layers is True, and not in AUTO_AUTHORING mode.\n\n copy_to_introducing_layer (bool): If to copy it to the introducing layer, or the current edit target. By default, it's current edit target.\n Its's valid only when combine_layers is true.",
"snippet": "omni.kit.commands.execute(\"CopyPrimsCommand\",\n                          paths_from=paths_from,  # typing.List[str]\n                          paths_to=None,  # typing.List[str]\n                          duplicate_layers=False,  # bool\n                          combine_layers=False,  # bool\n                          flatten_references=False,  # bool\n                          copy_to_introducing_layer=False)  # bool\n"
},
{
"title": "CreateAudioPrimFromAssetPathCommand",
"description": "[omni.usd.commands.usd_commands]\n\nCreate reference undoable.\n\nIt creates a new Audio prim.\n\nArgs:\n usd_context (omni.usd.UsdContext): UsdContext this command to run on.\n path_to (Sdf.Path): Path to create a new prim.\n asset_path (str): The asset it's necessary to add to references.",
"snippet": "omni.kit.commands.execute(\"CreateAudioPrimFromAssetPathCommand\",\n                          usd_context=usd_context,  # omni.usd._usd.UsdContext\n                          path_to=path_to,  # pxr.Sdf.Path\n                          asset_path=asset_path)  # str\n"
},
{
"title": "CreateDefaultXformOnPrimCommand",
"description": "[omni.usd.commands.usd_commands]\n\nCreate DefaultXform On Prim undoable.\n\nArgs:\n prim_path (str): Path of the primitive to be create xform attribtues",
"snippet": "omni.kit.commands.execute(\"CreateDefaultXformOnPrimCommand\",\n                          prim_path=prim_path)  # str\n"
},
{
"title": "CreateInstanceCommand",
"description": "[omni.usd.commands.usd_commands]\n\nInstance primitive undoable.\n\nIt creates a new prim, adds the master object to references, and flags this prim as instanceable. It the prim is\nXform, this command copies the transforms from the current frame. If the source prim is already instanceable, it\ntries to find master prim of this prim and uses it, so it's perfectly safe to press Ctrl-I multiple times.\n\nArgs:\n path_from (str): Path to instance from.",
"snippet": "omni.kit.commands.execute(\"CreateInstanceCommand\",\n                          path_from=path_from)  # str\n"
},
{
"title": "CreateInstancesCommand",
"description": "[omni.usd.commands.usd_commands]\n\nInstance multiple primitives undoable.\n\nArgs:\n paths_from List[str]: Paths to instance from.",
"snippet": "omni.kit.commands.execute(\"CreateInstancesCommand\",\n                          paths_from=paths_from)  # typing.List[str]\n"
},
{
"title": "CreateMdlMaterialPrimCommand",
"description": "[omni.usd.commands.usd_commands]\n\nCreate Mdl Material undoable.\n\nArgs:\n mtl_url (str):\n mtl_name (str):\n mtl_path (str):\n select_new_prim (bool):",
"snippet": "omni.kit.commands.execute(\"CreateMdlMaterialPrimCommand\",\n                          mtl_url=mtl_url,  # str\n                          mtl_name=mtl_name,  # str\n                          mtl_path=mtl_path,  # str\n                          select_new_prim=False)  # bool\n"
},
{
"title": "CreatePayloadCommand",
"description": "[omni.usd.commands.usd_commands]\n\nCreate payload undoable.\n\nIt creates a new prim and adds the asset and path as payloads.\n\nArgs:\n usd_context (omni.usd.UsdContext): UsdContext this command to run on.\n path_to (Sdf.Path): Path to create a new prim.\n asset_path (str): The asset it's necessary to add to payloads.\n prim_path (Sdf.Path): The prim in asset to payload.\n instanceable (bool): Whether to set the prim instanceable. It works together with `/persistent/app/stage/instanceableOnCreatingReference` setting.",
"snippet": "omni.kit.commands.execute(\"CreatePayloadCommand\",\n                          usd_context=usd_context,  # omni.usd._usd.UsdContext\n                          path_to=path_to,  # pxr.Sdf.Path\n                          asset_path=None,  # str\n                          prim_path=None,  # pxr.Sdf.Path\n                          instanceable=True)  # bool\n"
},
{
"title": "CreatePreviewSurfaceMaterialPrimCommand",
"description": "[omni.usd.commands.usd_commands]\n\nCreate Preview Surface Material undoable.\n\nArgs:\n mtl_path (str):\n select_new_prim (bool):",
"snippet": "omni.kit.commands.execute(\"CreatePreviewSurfaceMaterialPrimCommand\",\n                          mtl_path=mtl_path,  # str\n                          select_new_prim=False)  # bool\n"
},
{
"title": "CreatePreviewSurfaceTextureMaterialPrimCommand",
"description": "[omni.usd.commands.usd_commands]\n\nCreate Preview Surface Texture Material undoable.\n\nArgs:\n mtl_path (str):\n select_new_prim (bool):",
"snippet": "omni.kit.commands.execute(\"CreatePreviewSurfaceTextureMaterialPrimCommand\",\n                          mtl_path=mtl_path,\n                          select_new_prim=False)  # bool\n"
},
{
"title": "CreatePrimCommand",
"description": "[omni.usd.commands.usd_commands]\n\nCreate primitive undoable. It is same as `CreatePrimWithDefaultXformCommand`.\nKept for backward compatibility.\n\nArgs:\n prim_type (str): Primitive type, e.g. \"Sphere\", \"Cube\" etc.\n prim_path (str): Path of the primitive to be created at. If None is provided, it will be placed at stage root or under default prim using Type name.\n select_new_prim (bool) : Whether to select the prim after it's created.\n attributes (Dict[str, object]): optional attributes dict to set after creation.",
"snippet": "omni.kit.commands.execute(\"CreatePrimCommand\",\n                          prim_type=prim_type,  # str\n                          prim_path=None,  # str\n                          select_new_prim=True,  # bool\n                          attributes={},  # typing.Dict[str, typing.Any]\n                          create_default_xform=True,\n                          stage=None,  # typing.Union[pxr.Usd.Stage, NoneType]\n                          context_name=None)  # typing.Union[str, NoneType]\n"
},
{
"title": "CreatePrimCommandBase",
"description": "[omni.usd.commands.usd_commands]\n\nBase class to create a prim (and remove when undo)\n\nArgs:\n usd_context (omni.usd.UsdContext): UsdContext this command to run on.\n path_to (Sdf.Path): Path to create a new prim.\n asset_path (str): The asset it's necessary to add to references.",
"snippet": "omni.kit.commands.execute(\"CreatePrimCommandBase\",\n                          usd_context=usd_context,  # omni.usd._usd.UsdContext\n                          path_to=path_to,  # pxr.Sdf.Path\n                          asset_path=asset_path)  # str\n"
},
{
"title": "CreatePrimWithDefaultXformCommand",
"description": "[omni.usd.commands.usd_commands]\n\nCreate primitive undoable.\n\nArgs:\n prim_type (str): Primitive type, e.g. \"Sphere\", \"Cube\" etc.\n prim_path (str): Path of the primitive to be created at. If None is provided, it will be placed at stage root or under default prim using Type name.\n select_new_prim (bool) : Whether to select the prim after it's created.\n attributes (Dict[str, object]): optional attributes dict to set after creation.",
"snippet": "omni.kit.commands.execute(\"CreatePrimWithDefaultXformCommand\",\n                          prim_type=prim_type,  # str\n                          prim_path=None,  # str\n                          select_new_prim=True,  # bool\n                          attributes={},  # typing.Dict[str, typing.Any]\n                          create_default_xform=True,\n                          stage=None,  # typing.Union[pxr.Usd.Stage, NoneType]\n                          context_name=None)  # typing.Union[str, NoneType]\n"
},
{
"title": "CreatePrimsCommand",
"description": "[omni.usd.commands.usd_commands]\n\nCreate multiple primitives undoable.\n\nExample of command which calls other commands. Undo/Redo grouping handled automatically.\n\nArgs:\n prim_types (List[str]): List of primitive types to create, e.g [\"Sphere\", \"Cone\"].",
"snippet": "omni.kit.commands.execute(\"CreatePrimsCommand\",\n                          prim_types=prim_types)  # typing.List[str]\n"
},
{
"title": "CreateReferenceCommand",
"description": "[omni.usd.commands.usd_commands]\n\nCreate reference undoable.\n\nIt creates a new prim and adds the asset and path as references.\n\nArgs:\n usd_context (omni.usd.UsdContext): UsdContext this command to run on.\n path_to (Sdf.Path): Path to create a new prim.\n asset_path (str): The asset it's necessary to add to references.\n prim_path (Sdf.Path): The prim in asset to reference.\n instanceable (bool): Whether to set the prim instanceable. It works together with `/persistent/app/stage/instanceableOnCreatingReference` setting.",
"snippet": "omni.kit.commands.execute(\"CreateReferenceCommand\",\n                          usd_context=usd_context,  # omni.usd._usd.UsdContext\n                          path_to=path_to,  # pxr.Sdf.Path\n                          asset_path=None,  # str\n                          prim_path=None,  # pxr.Sdf.Path\n                          instanceable=True)  # bool\n"
},
{
"title": "CreateUsdAttributeCommand",
"description": "[omni.usd.commands.usd_commands]\n\nCreate USD Attribute.\n\nArgs:\n prim (Usd.Prim): Usd.Prim that will get a new attribute.\n attr_name (str): New attribute's name.\n attr_type (Sdf.ValueTypeName): New attribute's type.\n custom (bool): If the attribute is custom.\n variability (Sdf.Variability): whether the attribute may vary over time and value coordinates, and if its value comes through authoring or from its owner.\n attr_value (Any, optional): New attribute's value. Leave it as None to use default value.\n\nExample of usage:\n omni.kit.commands.execute(\"CreateUsdAttribute\",\n prim=prim,\n attr_name=\"custom\",\n attr_type=Sdf.ValueTypeNames.Double3)",
"snippet": "omni.kit.commands.execute(\"CreateUsdAttributeCommand\",\n                          prim=prim,  # pxr.Usd.Prim\n                          attr_name=attr_name,  # str\n                          attr_type=attr_type,  # pxr.Sdf.ValueTypeName\n                          custom=True,  # bool\n                          variability=Sdf.VariabilityVarying,  # pxr.Sdf.Variability\n                          attr_value=None)  # typing.Any\n"
},
{
"title": "CreateUsdAttributeOnPathCommand",
"description": "[omni.usd.commands.usd_commands]\n\nCreate USD Attribute.\n\nArgs:\n attr_path (Union[Sdf.Path, str]): Path to the new attribute to be created. The prim of this path must already exist.\n attr_type (Sdf.ValueTypeName): New attribute's type.\n custom (bool): If the attribute is custom.\n variability (Sdf.Variability): whether the attribute may vary over time and value coordinates, and if its value comes through authoring or from its owner.\n attr_value (Any, optional): New attribute's value. Leave it as None to use default value.\n usd_context_name(str): Name of the usd context to execute the command on.\n\nExample of usage:\n omni.kit.commands.execute(\"CreateUsdAttribute\",\n prim=prim,\n attr_name=\"custom\",\n attr_type=Sdf.ValueTypeNames.Double3)",
"snippet": "omni.kit.commands.execute(\"CreateUsdAttributeOnPathCommand\",\n                          attr_path=attr_path,  # typing.Union[pxr.Sdf.Path, str]\n                          attr_type=attr_type,  # pxr.Sdf.ValueTypeName\n                          custom=True,  # bool\n                          variability=Sdf.VariabilityVarying,  # pxr.Sdf.Variability\n                          attr_value=None,  # typing.Any\n                          usd_context_name=\"\")  # str\n"
},
{
"title": "DeletePrimsCommand",
"description": "[omni.usd.commands.usd_commands]\n\nDelete primitives undoable.\n\nArgs:\n paths (List[str]): Paths to prims to delete.\n\n destructive: If it's false, the delete will only happen in the current target, and follows:\n 1. If the prim spec is a def, it will remove the prim spec.\n 2. If the prim spec is a over, it will only deactivate this prim.\n 3. If the prim spec is not existed, it will create over prim and deactivate it.\n 4. If there is an overridden in a stronger layer, it will report errors.\n\n If it's true, it will remove all prim specs in all local layers.\n\n By default, it's True and means the delete operation is destructive for back-compatibility.",
"snippet": "omni.kit.commands.execute(\"DeletePrimsCommand\",\n                          paths=paths,  # typing.List[typing.Union[str, pxr.Sdf.Path]]\n                          destructive=True)\n"
},
{
"title": "FramePrimsCommand",
"description": "[omni.usd.commands.usd_commands]\n\nTransform a primitive to encompass the bounds of a list of paths.\n\nArgs:\n prim_to_move: Path to the primitive that is being moved.\n prims_to_frame(Sequence[Union[str, Sdf.Path]]): Sequence of primitives to use to calculate the bounds to frame.\n time_code(Usd.TimeCode): Timecode to set values at.\n usd_context_name(str): Name of the usd context to work on.\n aspect_ratio(float): Width / Height of the final image.\n use_horizontal_fov(bool): Whether to use a camera's horizontal or vertical field of view for framing.\n horizontal_fov(float): Default horizontal field-of-view to use for framing if one cannot be calculated.\n zoom(float): Final zoom in or out of the framed box. Values above 0.5 move further away and below 0.5 go closer.",
"snippet": "omni.kit.commands.execute(\"FramePrimsCommand\",\n                          prim_to_move=prim_to_move,  # typing.Union[str, pxr.Sdf.Path]\n                          prims_to_frame=None,  # typing.Sequence[typing.Union[str, pxr.Sdf.Path]]\n                          time_code=None,  # pxr.Usd.TimeCode\n                          usd_context_name=\"\",  # str\n                          aspect_ratio=1,  # float\n                          use_horizontal_fov=None,  # bool\n                          zoom=0.45,  # float\n                          horizontal_fov=0.20656116130367255)  # float\n"
},
{
"title": "GroupPrimsCommand",
"description": "[omni.usd.commands.usd_commands]\n\nGroup primitive undoable.\n\nArgs:\n prim_paths (List[str]): Prim paths that will be grouped.\n stage (Usd.Stage): Stage to operate. Optional.\n context_name (str): The usd context to operate. Optional.\n destructive (bool): If it's true, it will group all prims and remove original prims, which\n may edit other layers that are not edit target currently. \n If it's false, all changes will made only to the current edit target without\n touching other layers. By default, it's true for back compatibility.",
"snippet": "omni.kit.commands.execute(\"GroupPrimsCommand\",\n                          prim_paths=prim_paths,  # typing.List[typing.Union[str, pxr.Sdf.Path]]\n                          stage=None,  # typing.Union[pxr.Usd.Stage, NoneType]\n                          context_name=None,  # typing.Union[str, NoneType]\n                          destructive=True)\n"
},
{
"title": "LinkSpecsCommand",
"description": "[omni.usd.commands.usd_commands]",
"snippet": "omni.kit.commands.execute(\"LinkSpecsCommand\",\n                          usd_context=usd_context,\n                          spec_paths=spec_paths,  # typing.Union[str, typing.List[str]]\n                          layer_identifiers=layer_identifiers,  # typing.Union[str, typing.List[str]]\n                          additive=True,\n                          hierarchy=False)\n"
},
{
"title": "LockSpecsCommand",
"description": "[omni.usd.commands.usd_commands]",
"snippet": "omni.kit.commands.execute(\"LockSpecsCommand\",\n                          usd_context=usd_context,\n                          spec_paths=spec_paths,  # typing.Union[str, typing.List[str]]\n                          hierarchy=False)\n"
},
{
"title": "MovePrimCommand",
"description": "[omni.usd.commands.usd_commands]\n\nMove primitive undoable.\n\nArgs:\n path_from (str): Path to move prim from.\n\n path_to(str): Path to move prim to.\n\n time_code(Usd.TimeCode): Current timecode of the stage.\n\n keep_world_transform(bool): True to keep world transform after prim path is moved. False to keep local transfrom only.\n\n on_move_fn(Callable): Function to call when prim is renamed\n\n destructive(bool): If it's false, it will not remove original prim but deactivate it. By default, it's true\n for back compatibility.",
"snippet": "omni.kit.commands.execute(\"MovePrimCommand\",\n                          path_from=path_from,  # typing.Union[str, pxr.Sdf.Path]\n                          path_to=path_to,  # typing.Union[str, pxr.Sdf.Path]\n                          time_code=DEFAULT,  # pxr.Usd.TimeCode\n                          keep_world_transform=True,  # bool\n                          on_move_fn=None,  # typing.Callable\n                          destructive=True)\n"
},
{
"title": "MovePrimsCommand",
"description": "[omni.usd.commands.usd_commands]\n\nMove primitives undoable.\n\nArgs:\n paths_to_move Dict[str, str]: dictionary contaning entry of path_from : path_to.\n time_code(Usd.TimeCode): Current timecode of the stage.\n keep_world_transform(bool): True to keep world transform after prim path is moved. False to keep local transfrom only.\n destructive(bool): If it's false, it will not remove original prim but deactivate it. By default, it's true\n for back compatibility.",
"snippet": "omni.kit.commands.execute(\"MovePrimsCommand\",\n                          paths_to_move=paths_to_move,  # typing.Dict[str, str]\n                          time_code=DEFAULT,  # pxr.Usd.TimeCode\n                          keep_world_transform=True,  # bool\n                          on_move_fn=None,  # typing.Callable\n                          destructive=True)\n"
},
{
"title": "PayloadCommandBase",
"description": "[omni.usd.commands.usd_commands]",
"snippet": "omni.kit.commands.execute(\"PayloadCommandBase\",\n                          stage=stage,\n                          prim_path=prim_path,  # pxr.Sdf.Path\n                          payload=payload)  # pxr.Sdf.Payload\n"
},
{
"title": "ReferenceCommandBase",
"description": "[omni.usd.commands.usd_commands]",
"snippet": "omni.kit.commands.execute(\"ReferenceCommandBase\",\n                          stage=stage,\n                          prim_path=prim_path,  # pxr.Sdf.Path\n                          reference=reference)  # pxr.Sdf.Reference\n"
},
{
"title": "RelationshipTargetBase",
"description": "[omni.usd.commands.usd_commands]",
"snippet": "omni.kit.commands.execute(\"RelationshipTargetBase\",\n                          relationship=relationship,  # pxr.Usd.Relationship\n                          target=target)  # pxr.Sdf.Path\n"
},
{
"title": "RemovePayloadCommand",
"description": "[omni.usd.commands.usd_commands]",
"snippet": "omni.kit.commands.execute(\"RemovePayloadCommand\",\n                          stage=stage,\n                          prim_path=prim_path,  # pxr.Sdf.Path\n                          payload=payload)  # pxr.Sdf.Payload\n"
},
{
"title": "RemovePropertyCommand",
"description": "[omni.usd.commands.usd_commands]\n\nRemove Property.\n\nArgs:\n prop_path (str): Path of the property to be removed.\n usd_context_name (str): Usd context name to run the command on.",
"snippet": "omni.kit.commands.execute(\"RemovePropertyCommand\",\n                          prop_path=prop_path,  # typing.Union[pxr.Sdf.Path, str]\n                          usd_context_name=\"\")  # str\n"
},
{
"title": "RemoveReferenceCommand",
"description": "[omni.usd.commands.usd_commands]",
"snippet": "omni.kit.commands.execute(\"RemoveReferenceCommand\",\n                          stage=stage,\n                          prim_path=prim_path,  # pxr.Sdf.Path\n                          reference=reference)  # pxr.Sdf.Reference\n"
},
{
"title": "RemoveRelationshipTargetCommand",
"description": "[omni.usd.commands.usd_commands]\n\nRemove target from a relationship",
"snippet": "omni.kit.commands.execute(\"RemoveRelationshipTargetCommand\",\n                          relationship=relationship,  # pxr.Usd.Relationship\n                          target=target)  # pxr.Sdf.Path\n"
},
{
"title": "ReplacePayloadCommand",
"description": "[omni.usd.commands.usd_commands]",
"snippet": "omni.kit.commands.execute(\"ReplacePayloadCommand\",\n                          stage=stage,\n                          prim_path=prim_path,  # pxr.Sdf.Path\n                          old_payload=old_payload,  # pxr.Sdf.Payload\n                          new_payload=new_payload)  # pxr.Sdf.Payload\n"
},
{
"title": "ReplaceReferenceCommand",
"description": "[omni.usd.commands.usd_commands]",
"snippet": "omni.kit.commands.execute(\"ReplaceReferenceCommand\",\n                          stage=stage,\n                          prim_path=prim_path,  # pxr.Sdf.Path\n                          old_reference=old_reference,  # pxr.Sdf.Reference\n                          new_reference=new_reference)  # pxr.Sdf.Reference\n"
},
{
"title": "ReplaceReferencesCommand",
"description": "[omni.usd.commands.usd_commands]\n\nClears/Add references undoable.\n\nNOTE: THIS COMMAND HAS A LOT OF ISSUES AND IS DEPRECATED. PLEASE USE ReplaceReferenceCommand instead!\n\nArgs:\n path (str): Prim path.\n old_url(str): Url to be replaced.\n new_url(str): Replacement url.",
"snippet": "omni.kit.commands.execute(\"ReplaceReferencesCommand\",\n                          path=path,  # str\n                          old_url=old_url,  # str\n                          new_url=new_url)  # str\n"
},
{
"title": "SelectPrimsCommand",
"description": "[omni.usd.commands.usd_commands]\n\nSelect primitives undoable.\n\nArgs:\n old_selected_paths (List[str]): Old selected prim paths.\n new_selected_paths (List[str]): Prim paths to be selected.\n expand_in_stage (bool, DEPRECATED): Whether to expand the path in Stage Window on selection.\n This param is left for compatibility.\n\nREMINDER: Both params old_selected_paths and new_selected_paths should be const\nout of the command. And it's caller's responsibility to maintain that. Otherwise, undo will not\nreturn to its original state.",
"snippet": "omni.kit.commands.execute(\"SelectPrimsCommand\",\n                          old_selected_paths=old_selected_paths,  # typing.List[str]\n                          new_selected_paths=new_selected_paths,  # typing.List[str]\n                          expand_in_stage=expand_in_stage)  # bool\n"
},
{
"title": "SetMaterialStrengthCommand",
"description": "[omni.usd.commands.usd_commands]\n\nSet material binding strength undoable.\n\nArgs:\n rel: Material binding relationship.\n strength (float): Strength.",
"snippet": "omni.kit.commands.execute(\"SetMaterialStrengthCommand\",\n                          rel=rel,\n                          strength=strength)\n"
},
{
"title": "ToggleVisibilitySelectedPrimsCommand",
"description": "[omni.usd.commands.usd_commands]\n\nToggles the visiblity of the selected primitives undoable.\n\nArgs:\n selected_paths (List[str]): Old selected prim paths.",
"snippet": "omni.kit.commands.execute(\"ToggleVisibilitySelectedPrimsCommand\",\n                          selected_paths=selected_paths)  # typing.List[str]\n"
},
{
"title": "TransformPrimCommand",
"description": "[omni.usd.commands.usd_commands]\n\nTransform primitive undoable.\n\nArgs:\n path (str): Prim path.\n new_transform_matrix: New transform matrix.\n old_transform_matrix: Optional old transform matrix to undo to. If `None` use current transform.",
"snippet": "omni.kit.commands.execute(\"TransformPrimCommand\",\n                          path=path,  # str\n                          new_transform_matrix=new_transform_matrix,  # pxr.Gf.Matrix4d\n                          old_transform_matrix=None,  # pxr.Gf.Matrix4d\n                          time_code=DEFAULT,  # pxr.Usd.TimeCode\n                          had_transform_at_key=False,  # bool\n                          usd_context_name=\"\")  # str\n"
},
{
"title": "TransformPrimSRTCommand",
"description": "[omni.usd.commands.usd_commands]\n\nTransform primitive undoable.\n\nArgs:\n path (str): Prim path.\n new_translation (Gf.Vec3d): New local translation.\n new_rotation_euler (Gf.Vec3d): New local rotation euler angles (in degree).\n new_scale (Gf.Vec3d): New scale.\n new_rotation_order (Gf.Vec3i): New rotation order (e.g. (0, 1, 2) means XYZ). Set to None to stay the same.\n old_translation (Gf.Vec3d): Old local translation. Leave to None to use current value.\n old_rotation_euler (Gf.Vec3d): Old local rotation euler angles. Leave to None to use current value.\n old_rotation_order (Gf.Vec3i): Old local rotation order. Leave to None to use current value.\n old_scale (Gf.Vec3d): Old scale. Leave to None to use current value.\n time_code (Usd.TimeCode): TimeCode to set transform to.\n had_transform_at_key (bool): If there's key for transfrom.\n usd_context_name (str): Usd context name to run the command on.",
"snippet": "omni.kit.commands.execute(\"TransformPrimSRTCommand\",\n                          path=path,  # str\n                          new_translation=None,  # pxr.Gf.Vec3d\n                          new_rotation_euler=None,  # pxr.Gf.Vec3d\n                          new_scale=None,  # pxr.Gf.Vec3d\n                          new_rotation_order=None,  # pxr.Gf.Vec3i\n                          old_translation=None,  # pxr.Gf.Vec3d\n                          old_rotation_euler=None,  # pxr.Gf.Vec3d\n                          old_rotation_order=None,  # pxr.Gf.Vec3i\n                          old_scale=None,  # pxr.Gf.Vec3d\n                          time_code=DEFAULT,  # pxr.Usd.TimeCode\n                          had_transform_at_key=False,  # bool\n                          usd_context_name=\"\")  # str\n"
},
{
"title": "TransformPrimsCommand",
"description": "[omni.usd.commands.usd_commands]\n\nTransform multiple primitives undoable.\n\nUndo/Redo grouping handled automatically.\n\nArgs:\n prims_to_transform: List of primitive to transform in a tuple of (path, new_transform, old_transform).",
"snippet": "omni.kit.commands.execute(\"TransformPrimsCommand\",\n                          prims_to_transform=prims_to_transform)  # typing.List[typing.Tuple[str, pxr.Gf.Matrix4d, pxr.Gf.Matrix4d, pxr.Usd.TimeCode]]\n"
},
{
"title": "TransformPrimsSRTCommand",
"description": "[omni.usd.commands.usd_commands]\n\nTransform multiple primitives undoable.\n\nUndo/Redo grouping handled automatically.\n\nArgs:\n prims_to_transform: List of primitive to transform in a tuple of\n (path,\n new_translation,\n new_rotation_euler,\n new_rotation_order,\n new_scale,\n old_translation,\n old_rotation_euler,\n old_rotation_order,\n old_scale,\n time_code,\n had_transform_at_key).",
"snippet": "omni.kit.commands.execute(\"TransformPrimsSRTCommand\",\n                          prims_to_transform=prims_to_transform)  # typing.List[typing.Tuple[str, pxr.Gf.Vec3d, pxr.Gf.Vec3d, pxr.Gf.Vec3i, pxr.Gf.Vec3d, pxr.Gf.Vec3d, pxr.Gf.Vec3d, pxr.Gf.Vec3i, pxr.Gf.Vec3d, pxr.Usd.TimeCode, bool]]\n"
},
{
"title": "UnhideAllPrimsCommand",
"description": "[omni.usd.commands.usd_commands]",
"snippet": "omni.kit.commands.execute(\"UnhideAllPrimsCommand\")\n"
},
{
"title": "UnlinkSpecsCommand",
"description": "[omni.usd.commands.usd_commands]",
"snippet": "omni.kit.commands.execute(\"UnlinkSpecsCommand\",\n                          usd_context=usd_context,\n                          spec_paths=spec_paths,  # typing.Union[str, typing.List[str]]\n                          layer_identifiers=layer_identifiers,  # typing.Union[str, typing.List[str]]\n                          hierarchy=False)\n"
},
{
"title": "UnlockSpecsCommand",
"description": "[omni.usd.commands.usd_commands]",
"snippet": "omni.kit.commands.execute(\"UnlockSpecsCommand\",\n                          usd_context=usd_context,\n                          spec_paths=spec_paths,  # typing.Union[str, typing.List[str]]\n                          hierarchy=False)\n"
}
]
}
]
}